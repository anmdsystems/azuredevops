<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Converters" #>

<#@ output extension=".txt" #>

<#
// DO NOT WIPE THE SOURCE CODE...
var codeGenPath = $"{this.rootTemplatePath}codegen\\";
Deployment data = JsonConvert.DeserializeObject<Deployment>(this.deployment);

// TEMPLATE CODE HERE
#>
# Introduction 

# Getting Started

# Build and Test

# Contribute
<#
// END TEMPLATE CODE

if (projectPath == "team") {
    SaveOutputToSubFolder(codeGenPath, $"{data.Id}\\{data.TeamName.ToLower()}-infra", "README.md");    
} else {
    SaveOutputToSubFolder(codeGenPath, $"{data.Id}\\{data.TeamName.ToLower()}{this.getName(this.projectPath, data.Name)}-{this.projectPath}infra", "README.md");    
}
#>


<#+
private void SaveOutputToSubFolder(string rootTemplatePath, string folderName, string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(rootTemplatePath.Replace('\\', Path.DirectorySeparatorChar));
  string newDirectoryName = Path.Combine(templateDirectory,folderName.Replace('\\', Path.DirectorySeparatorChar));
  if(!Directory.Exists(newDirectoryName))
  {  
	Directory.CreateDirectory(newDirectoryName);
  }
  string outputFilePath = Path.Combine(newDirectoryName, outputFileName.Replace('\\', Path.DirectorySeparatorChar));
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}

private string getName(string projectPath, string name) {
    return (projectPath == "ingress-")? "" : $"-{name.ToLower()}";
}

private readonly string deployment;
private readonly string rootTemplatePath;
private readonly string projectPath;
public ReadMe(string deployment, string rootTemplatePath, string projectPath) {
    this.deployment = deployment;
    this.rootTemplatePath = rootTemplatePath;
    this.projectPath = projectPath;
}
#>