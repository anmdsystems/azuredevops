// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ngCodeGen.CodeTemplates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    using System.IO;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AzureFunctionDeployment : AzureFunctionDeploymentBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            
            #line 14 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"

Deployment data = JsonConvert.DeserializeObject<Deployment>(this.deployment);

var teamName = data.TeamName;
var appName = data.Name;
var application = data.ApplicationName;
var appId = data.Id;
var useVnetIntegration = data.UseVnetIntegration;
var isLinux = data.IsLinux;
var hasActionAlerts = data.HasActionAlerts;
var applicationType = data.ApplicationType;
var owner = data.Owner;
var multiRegion = (data.IsMultiRegion) ? "[concat('-', parameters('DeploymentLocation'))]" : "";
var ipSecurityRestrictions = data.IpSecurityRestrictions;
var internalNetworkName = data.InternalNetworkName;
var resourceGroupConfigKVSuffix = data.ResourceGroupConfigKVSuffix;
var useDbaVault = data.UseDbaVault;
var dotnetcore = data.IsDotNetCore;
var customDns = data.IsCustomDns;
var hasSlots = data.HasSlots;
var useIndependentPlan = data.UseIndependentPlan;
var kind = data.Kind ?? "app";
var islinux = data.IsLinux;
var isContainer = data.IsContainer;
var dotnetstartupdll = data.StartupCommand ?? "";
var dotnetversion = data.Dotnetversion ?? "";
var hasCustomCertificate = data.IsCustomDns;

var appServicePlanAutoScaleEmailNotificationContacts = JsonConvert.SerializeObject(data.AppServicePlanAutoScaleEmailNotificationContacts);

// DO NOT WIPE THE SOURCE CODE...
var codeGenPath = $"{this.rootTemplatePath}codegen\\";

// TEMPLATE CODE HERE

            
            #line default
            #line hidden
            this.Write("\r\n{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploym" +
                    "entTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"Env" +
                    "ironment\": {\r\n      \"type\": \"string\",\r\n      \"metadata\": {\r\n        \"description" +
                    "\": \"The environment type to be deployed. This is used when naming resources.\"\r\n " +
                    "     }\r\n    },\r\n    \"AppServicePlanSku\": {\r\n      \"type\": \"string\",\r\n      \"meta" +
                    "data\": {\r\n        \"description\": \"The SKU to be used for the app service plan.\"\r" +
                    "\n      }\r\n    },\r\n    \"AppServicePlanTier\": {\r\n      \"type\": \"string\",\r\n      \"m" +
                    "etadata\": {\r\n        \"description\": \"The tier to be used for the app service pla" +
                    "n.\"\r\n      }\r\n    },\r\n    \"AppServicePlanInstanceCount\": {\r\n      \"type\": \"int\"," +
                    "\r\n      \"metadata\": {\r\n        \"description\": \"The number of instances to run wi" +
                    "thin the app service plan.\"\r\n      }\r\n    },\r\n    \"EnableAppServiceAutoscaling\":" +
                    " {\r\n      \"type\": \"bool\",\r\n      \"defaultValue\": false,\r\n      \"metadata\": {\r\n  " +
                    "      \"description\": \"Specifices if auto scaling should be applied to the app se" +
                    "rvice plan.\"\r\n      }\r\n    },\r\n    \"AppServiceSslCertificateName\": {\r\n      \"typ" +
                    "e\": \"string\",\r\n      \"metadata\": {\r\n        \"description\": \"The name of the SSL " +
                    "certificate bound to the app service to be used by custom hostnames.\"\r\n      }\r\n" +
                    "    },\r\n    \"AppServiceCustomHostname\": {\r\n      \"type\": \"string\",\r\n      \"metad" +
                    "ata\": {\r\n        \"description\": \"The custom hostname to associate with the app s" +
                    "ervice.\"\r\n      }\r\n    },\r\n    \"AppServiceBlueSlotCustomHostname\": {\r\n      \"typ" +
                    "e\": \"string\",\r\n      \"metadata\": {\r\n        \"description\": \"The custom hostname " +
                    "to associate with the blue slot for the app service.\"\r\n      }\r\n    },\r\n    \"Key" +
                    "VaultTenantId\": {\r\n      \"type\": \"string\",\r\n      \"metadata\": {\r\n        \"descri" +
                    "ption\": \"The Azure AD Tenant Id associated with the Key Vault.\"\r\n      }\r\n    }," +
                    "\r\n    \"KeyVaultAccessPolicies\": {\r\n      \"type\": \"object\",\r\n      \"defaultValue\"" +
                    ": { \"list\": [] },\r\n      \"metadata\": {\r\n        \"description\": \"The access polic" +
                    "ies to be applied to the Key Vault. Defaults to no access policies.\"\r\n      }\r\n " +
                    "   },\r\n    \"DeploymentLocation\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue" +
                    "\": \"[resourceGroup().location]\",\r\n      \"metadata\": {\r\n        \"description\": \"T" +
                    "he Azure Location (Region) that the resources should be deployed into.\"\r\n      }" +
                    "\r\n    },\r\n    \"CertKeyVaultRG\": {\r\n      \"type\": \"string\",\r\n      \"metadata\": {\r" +
                    "\n        \"description\": \"Existing Key Vault resource Id with an access policy to" +
                    " allow Microsoft.Web RP to read Key Vault secrets (Checkout README.md for more i" +
                    "nformation)\"\r\n      }\r\n    },\r\n    \"CertKeyVaultName\": {\r\n      \"type\": \"string\"" +
                    "\r\n    },\r\n    \"ProductionSpecificSettings\": {\r\n      \"type\": \"object\",\r\n      \"d" +
                    "efaultValue\": {},\r\n      \"metadata\": {\r\n        \"description\": \"Production Speci" +
                    "fic AppSettings\"\r\n      }\r\n    },\r\n    \"SlotSpecificSettings\": {\r\n      \"type\": " +
                    "\"object\",\r\n      \"defaultValue\": {},\r\n      \"metadata\": {\r\n        \"description\"" +
                    ": \"Slot Specific Specific AppSettings\"\r\n      }\r\n    },\r\n    \"AppConnectionstrin" +
                    "gs\": {\r\n      \"type\": \"object\",\r\n      \"defaultValue\": {},\r\n      \"metadata\": {\r" +
                    "\n        \"description\": \"App Specific Connection Settings\"\r\n      }\r\n    },\r\n   " +
                    " \"SlotConnectionstringSettings\": {\r\n      \"type\": \"object\",\r\n      \"defaultValue" +
                    "\": {},\r\n      \"metadata\": {\r\n        \"description\": \"Slot Specific Specific Conn" +
                    "ection Strings\"\r\n      }\r\n    },\r\n    \"ServiceBusNamespace\": {\r\n      \"type\": \"s" +
                    "tring\",\r\n      \"defaultValue\": \"\",\r\n      \"metadata\": {\r\n        \"description\": " +
                    "\"serviceBusNamespace Settings\"\r\n      }\r\n    },\r\n    \"RelayResourceGroupName\": {" +
                    "\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"\",\r\n      \"metadata\": {\r\n     " +
                    "   \"description\": \"relayResourceGroupName Setting\"\r\n      }\r\n    },\r\n    \"VNetNa" +
                    "me\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"\",\r\n      \"metadata\": {\r" +
                    "\n        \"description\": \"vNet Integration Setting\"\r\n      }\r\n    },\r\n    \"SubNet" +
                    "Name\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"\",\r\n      \"metadata\": " +
                    "{\r\n        \"description\": \"subNet Integration Setting\"\r\n      }\r\n    },\r\n    \"Al" +
                    "ertObject\": {\r\n      \"type\": \"object\",\r\n      \"defaultValue\": {\r\n        \"alerts" +
                    "\": [\r\n          {\r\n            \"alertName\": \"fixed\"\r\n          }\r\n        ]\r\n   " +
                    "   },\r\n      \"metadata\": {\r\n        \"description\": \"Specifies all secrets {\\\"sec" +
                    "retName\\\":\\\"\\\",\\\"secretValue\\\":\\\"\\\"} wrapped in a secure object.\"\r\n      }\r\n    " +
                    "},\r\n    \"Alerts\": {\r\n      \"type\": \"String\",\r\n      \"defaultValue\": \"Yes\"\r\n    }" +
                    "\r\n  },\r\n  \"variables\": {\r\n    \"resourceTags\": {\r\n      \"Environment\": \"[toUpper(" +
                    "parameters(\'Environment\'))]\",\r\n      \"Application\": \"");
            
            #line 209 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(application));
            
            #line default
            #line hidden
            this.Write("\",\r\n      \"Owner\": \"");
            
            #line 210 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(owner));
            
            #line default
            #line hidden
            this.Write("\"\r\n    },\r\n    \"teamName\": \"");
            
            #line 212 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(teamName));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"appName\": \"");
            
            #line 213 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(appName));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"applicationType\": \"");
            
            #line 214 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(applicationType));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"deploymentLocation\": \"[resourceGroup().location]\",\r\n    \"multiRegion\": \"" +
                    "");
            
            #line 216 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(multiRegion));
            
            #line default
            #line hidden
            this.Write(@""",
    ""environment"": ""[toLower(parameters('Environment'))]"",
    ""resourcePrefix"": ""[concat(variables('teamName'), '-', variables('environment'), variables('multiRegion'), '-', variables('appName'))]"",
    ""azureKeyValueTenantId"": ""[parameters('KeyVaultTenantId')]"",
    ""keyVaultAccessPolicies"": ""[parameters('KeyVaultAccessPolicies')]"",
    ""apiAppInsightsName"": ""[concat(variables('resourcePrefix'), '-', variables('applicationType'), '-appinsights')]"",
     ");
            
            #line 222 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (useIndependentPlan) {
            
            #line default
            #line hidden
            this.Write("    \"appServicePlanName\": \"[concat(variables(\'resourcePrefix\'), \'-\', variables(\'a" +
                    "pplicationType\'), \'-serviceplan\')]\",  \r\n     ");
            
            #line 224 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
} else {
            
            #line default
            #line hidden
            this.Write("    \"appServicePlanName\": \"[concat(variables(\'teamName\'), \'-\', variables(\'environ" +
                    "ment\'), variables(\'multiRegion\'), \'-serviceplan\')]\",\r\n     ");
            
            #line 226 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write(@"    ""appServicePlanResourceId"": ""[resourceId('Microsoft.Web/serverFarms/', variables('appServicePlanName'))]"",
    ""appServicePlanSku"": ""[parameters('AppServicePlanSku')]"",
    ""appServicePlanTier"": ""[parameters('AppServicePlanTier')]"",
    ""appServicePlanInstanceCount"": ""[parameters('AppServicePlanInstanceCount')]"",
    ""appServicePlanAutoScaleSettingsName"": ""[concat(variables('appServicePlanName'), '-autoscalesettings')]"",
    ""certKeyVaultId"": ""[resourceId(parameters('CertKeyVaultRG'), 'Microsoft.KeyVault/vaults', parameters('CertKeyVaultName'))]"",
    ""appServicePlanAutoScaleEmailNotificationContacts"": ");
            
            #line 233 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(appServicePlanAutoScaleEmailNotificationContacts));
            
            #line default
            #line hidden
            this.Write(",\r\n    \"enableAppServiceAutoscaling\": \"[parameters(\'EnableAppServiceAutoscaling\')" +
                    "]\",\r\n    \"appServiceName\": \"[concat(variables(\'resourcePrefix\'), \'-\', variables(" +
                    "\'applicationType\'))]\",\r\n    \"vNetName\": \"[parameters(\'VNetName\')]\",\r\n    \"subNet" +
                    "Name\": \"[parameters(\'SubNetName\')]\",\r\n    \"appServiceSslCertificateName\": \"[para" +
                    "meters(\'AppServiceSslCertificateName\')]\",\r\n    \"appServiceCustomHostname\": \"[par" +
                    "ameters(\'AppServiceCustomHostname\')]\",\r\n    \"appServiceBlueSlotName\": \"blue\",\r\n " +
                    "   \"appServiceBlueSlotCustomHostname\": \"[parameters(\'AppServiceBlueSlotCustomHos" +
                    "tname\')]\",\r\n    \"scmDetectorPageLink\": \".scm.azurewebsites.net/detectors\",\r\n    " +
                    "\"productionSpecificSettings\": \"[parameters(\'ProductionSpecificSettings\')]\",\r\n   " +
                    " \"slotSpecificSettings\": \"[parameters(\'SlotSpecificSettings\')]\",\r\n    \"appConnec" +
                    "tionstrings\": \"[parameters(\'AppConnectionstrings\')]\",\r\n    \"slotConnectionstring" +
                    "Settings\": \"[parameters(\'SlotConnectionstringSettings\')]\",\r\n    \"serviceBusNames" +
                    "pace\": \"[parameters(\'ServiceBusNamespace\')]\",\r\n    \"relayResourceGroupName\": \"[p" +
                    "arameters(\'RelayResourceGroupName\')]\"\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"api" +
                    "Version\": \"2015-05-01\",\r\n      \"name\": \"[variables(\'apiAppInsightsName\')]\",\r\n   " +
                    "   \"type\": \"Microsoft.Insights/components\",\r\n      \"location\": \"[resourceGroup()" +
                    ".location]\",\r\n      \"tags\": \"[variables(\'resourceTags\')]\",\r\n      \"kind\": \"web\"," +
                    "\r\n      \"properties\": {\r\n        \"applicationId\": \"[variables(\'apiAppInsightsNam" +
                    "e\')]\"\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"Microsoft.Web/serverfarms\",\r\n     " +
                    " \"apiVersion\": \"2019-08-01\",\r\n      \"name\": \"[variables(\'appServicePlanName\')]\"," +
                    "\r\n      \"location\": \"[resourceGroup().location]\",\r\n      \"tags\": \"[variables(\'re" +
                    "sourceTags\')]\",\r\n      \"kind\": \"app\",\r\n      \"properties\": {\r\n        ");
            
            #line 270 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (islinux) {
            
            #line default
            #line hidden
            this.Write("            \"reserved\": true,\r\n        ");
            
            #line 272 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write(@"        ""name"": ""[variables('appServicePlanName')]""
      },
      ""sku"": {
        ""name"": ""[variables('appServicePlanSku')]"",
        ""tier"": ""[variables('appServicePlanTier')]"",
        ""capacity"": ""[variables('appServicePlanInstanceCount')]""
      }
    },
    ");
            
            #line 281 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (hasCustomCertificate) {
            
            #line default
            #line hidden
            this.Write(@"    {
      ""type"": ""Microsoft.Web/certificates"",
      ""apiVersion"": ""2016-03-01"",
      ""name"": ""[variables('appServiceSslCertificateName')]"",
      ""location"": ""[resourceGroup().location]"",
      ""dependsOn"": [
        ""[concat('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]""
      ],
      ""properties"": {
        ""keyVaultId"": ""[variables('certKeyVaultId')]"",
        ""keyVaultSecretName"": ""[variables('appServiceSslCertificateName')]"",
        ""serverFarmId"": ""[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]""
      }
    },
    ");
            
            #line 296 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write("    {\r\n      \"name\": \"[variables(\'appServicePlanAutoScaleSettingsName\')]\",\r\n     " +
                    " \"type\": \"microsoft.insights/autoscalesettings\",\r\n      \"dependsOn\": [\r\n        " +
                    "\"[concat(\'Microsoft.Web/serverfarms/\', variables(\'appServicePlanName\'))]\"\r\n     " +
                    " ],\r\n      \"apiVersion\": \"2015-04-01\",\r\n      \"location\": \"[resourceGroup().loca" +
                    "tion]\",\r\n      \"tags\": \"[variables(\'resourceTags\')]\",\r\n      \"properties\": {\r\n  " +
                    "      \"enabled\": \"[variables(\'enableAppServiceAutoscaling\')]\",\r\n        \"targetR" +
                    "esourceUri\": \"[variables(\'appServicePlanResourceId\')]\",\r\n        \"profiles\": [\r\n" +
                    "          {\r\n            \"name\": \"DefaultAutoscaleProfile\",\r\n            \"capaci" +
                    "ty\": {\r\n              \"minimum\": \"1\",\r\n              \"maximum\": \"10\",\r\n         " +
                    "     \"default\": \"1\"\r\n            },\r\n            \"rules\": [\r\n              {\r\n  " +
                    "              \"metricTrigger\": {\r\n                  \"metricName\": \"CpuPercentage" +
                    "\",\r\n                  \"metricNamespace\": \"\",\r\n                  \"metricResourceU" +
                    "ri\": \"[variables(\'appServicePlanResourceId\')]\",\r\n                  \"operator\": \"" +
                    "GreaterThan\",\r\n                  \"statistic\": \"Average\",\r\n                  \"thr" +
                    "eshold\": 65,\r\n                  \"timeAggregation\": \"Average\",\r\n                 " +
                    " \"timeGrain\": \"PT1M\",\r\n                  \"timeWindow\": \"PT5M\"\r\n                }" +
                    ",\r\n                \"scaleAction\": {\r\n                  \"direction\": \"Increase\",\r" +
                    "\n                  \"type\": \"ChangeCount\",\r\n                  \"value\": \"1\",\r\n    " +
                    "              \"cooldown\": \"PT5M\"\r\n                }\r\n              },\r\n         " +
                    "     {\r\n                \"metricTrigger\": {\r\n                  \"metricName\": \"Cpu" +
                    "Percentage\",\r\n                  \"metricNamespace\": \"\",\r\n                  \"metri" +
                    "cResourceUri\": \"[variables(\'appServicePlanResourceId\')]\",\r\n                  \"op" +
                    "erator\": \"LessThan\",\r\n                  \"statistic\": \"Average\",\r\n               " +
                    "   \"threshold\": 45,\r\n                  \"timeAggregation\": \"Average\",\r\n          " +
                    "        \"timeGrain\": \"PT1M\",\r\n                  \"timeWindow\": \"PT5M\"\r\n          " +
                    "      },\r\n                \"scaleAction\": {\r\n                  \"direction\": \"Decr" +
                    "ease\",\r\n                  \"type\": \"ChangeCount\",\r\n                  \"value\": \"1\"" +
                    ",\r\n                  \"cooldown\": \"PT5M\"\r\n                }\r\n              }\r\n   " +
                    "         ]\r\n          }\r\n        ],\r\n        \"notifications\": [\r\n          {\r\n  " +
                    "          \"operation\": \"Scale\",\r\n            \"email\": {\r\n              \"sendToSu" +
                    "bscriptionAdministrator\": true,\r\n              \"sendToSubscriptionCoAdministrato" +
                    "rs\": false,\r\n              \"customEmails\": \"[variables(\'appServicePlanAutoScaleE" +
                    "mailNotificationContacts\')]\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n  " +
                    "  },\r\n    {\r\n      \"name\": \"[variables(\'appServiceName\')]\",\r\n      \"type\": \"Micr" +
                    "osoft.Web/sites\",\r\n      \"apiVersion\": \"2019-08-01\",\r\n       \"location\": \"[resou" +
                    "rceGroup().location]\",\r\n      \"tags\": \"[variables(\'resourceTags\')]\",\r\n      \"kin" +
                    "d\": \"functionapp\",\r\n      \"dependsOn\": [\r\n        \"[concat(\'Microsoft.Web/server" +
                    "farms/\', variables(\'appServicePlanName\'))]\",\r\n        \"[concat(\'Microsoft.Insigh" +
                    "ts/components/\', variables(\'apiAppInsightsName\'))]\"\r\n      ],\r\n      \"identity\":" +
                    " {\r\n        \"type\": \"SystemAssigned\"\r\n      },\r\n      \"properties\": {\r\n        \"" +
                    "clientAffinityEnabled\": true,\r\n        \"clientCertEnabled\": false,\r\n        \"con" +
                    "tainerSize\": 1536,\r\n        \"dailyMemoryTimeQuota\": 0,\r\n        \"enabled\": true," +
                    "\r\n        \"hostNamesDisabled\": false,\r\n        \"hostNameSslStates\": [\r\n         " +
                    " {\r\n            \"name\": \"[concat(variables(\'appName\'), \'.azurewebsites.net\')]\",\r" +
                    "\n            \"sslState\": \"Disabled\",\r\n            \"hostType\": \"Standard\"\r\n      " +
                    "    },\r\n          {\r\n            \"name\": \"[concat(variables(\'appName\'), \'.scm.az" +
                    "urewebsites.net\')]\",\r\n            \"sslState\": \"Disabled\",\r\n            \"hostType" +
                    "\": \"Repository\"\r\n          }\r\n        ],\r\n        \"httpsOnly\": false,\r\n        \"" +
                    "hyperV\": false,\r\n        \"isXenon\": false,\r\n        \"redundancyMode\": \"None\",\r\n " +
                    "       \"reserved\": false,\r\n        \"scmSiteAlsoStopped\": false,\r\n        \"server" +
                    "FarmId\": \"[resourceId(\'Microsoft.Web/serverfarms\', variables(\'appServicePlanName" +
                    "\'))]\",\r\n        \"siteConfig\": {\r\n          \"numberOfWorkers\": 1,\r\n          \"def" +
                    "aultDocuments\": [\r\n            \"Default.htm\",\r\n            \"Default.html\",\r\n    " +
                    "        \"Default.asp\",\r\n            \"index.htm\",\r\n            \"index.html\",\r\n   " +
                    "         \"iisstart.htm\",\r\n            \"default.aspx\",\r\n            \"index.php\"\r\n" +
                    "          ],\r\n          \"netFrameworkVersion\": \"v4.0\",\r\n          \"phpVersion\": " +
                    "\"5.6\",\r\n          \"requestTracingEnabled\": false,\r\n          \"remoteDebuggingEna" +
                    "bled\": false,\r\n          \"remoteDebuggingVersion\": \"VS2019\",\r\n          \"httpLog" +
                    "gingEnabled\": false,\r\n          \"logsDirectorySizeLimit\": 35,\r\n          \"detail" +
                    "edErrorLoggingEnabled\": false,\r\n          \"publishingUsername\": \"[concat(\'$\', va" +
                    "riables(\'appName\'))]\",\r\n          \"scmType\": \"None\",\r\n          \"use32BitWorkerP" +
                    "rocess\": true,\r\n          \"webSocketsEnabled\": false,\r\n          \"alwaysOn\": fal" +
                    "se,\r\n          \"managedPipelineMode\": \"Integrated\",\r\n          ");
            
            #line 437 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (dotnetcore) {
            
            #line default
            #line hidden
            this.Write("          \"metadata\": [\r\n            {\r\n              \"name\": \"CURRENT_STACK\",\r\n " +
                    "             \"value\": \"dotnetcore\"\r\n            }\r\n          ],\r\n          ");
            
            #line 444 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write(@"          ""experiments"": {
            ""rampUpRules"": []
          },
          ""autoHealEnabled"": false,
          ""cors"": {
            ""allowedOrigins"": [
              ""https://functions.azure.com"",
              ""https://functions-staging.azure.com"",
              ""https://functions-next.azure.com""
            ],
            ""supportCredentials"": false
          },
          ""localMySqlEnabled"": false,
          ");
            
            #line 458 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (!isContainer) {
            
            #line default
            #line hidden
            this.Write("          \"virtualApplications\": [\r\n            {\r\n                \"virtualPath\":" +
                    " \"/\",\r\n                \"physicalPath\": \"site\\\\wwwroot\",\r\n                \"preloa" +
                    "dEnabled\": false\r\n            }\r\n          ]\r\n          ");
            
            #line 466 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write("        },\r\n        \"http20Enabled\": false,\r\n        \"minTlsVersion\": \"1.2\",\r\n   " +
                    "     \"alwaysOn\": true,\r\n        ");
            
            #line 471 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (islinux && dotnetcore) {
            
            #line default
            #line hidden
            this.Write("        \"linuxFxVersion\": \"DOTNETCORE|");
            
            #line 472 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dotnetversion));
            
            #line default
            #line hidden
            this.Write("\",\r\n        ");
            
            #line 473 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write("        \"ftpsState\": \"AllAllowed\",\r\n        \"reservedInstanceCount\": 0\r\n      },\r" +
                    "\n      \"resources\": [\r\n      ]\r\n    },\r\n    ");
            
            #line 480 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (customDns) {
            
            #line default
            #line hidden
            this.Write(@"    {
      ""type"": ""Microsoft.Web/sites/hostnameBindings"",
      ""name"": ""[concat(variables('appServiceName'), '/', variables('appServiceCustomHostname'))]"",
      ""dependsOn"": [
        ""[resourceId('Microsoft.Web/Sites', variables('appServiceName'))]""
      ],
      ""apiVersion"": ""2019-08-01"",
      ""location"": ""[resourceGroup().location]"",
      ""properties"": {
        ""sslState"": ""SniEnabled"",
        ""thumbprint"": ""[reference(resourceId('Microsoft.Web/certificates', variables('appServiceSslCertificateName')), '2019-08-01').Thumbprint]""
      }
    },
    ");
            
            #line 494 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 495 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (useVnetIntegration) {
            
            #line default
            #line hidden
            this.Write("    {\r\n        \"type\": \"Microsoft.Web/sites/virtualNetworkConnections\",\r\n        " +
                    "\"name\": \"[concat(variables(\'appServiceName\'), \'/");
            
            #line 498 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(appId));
            
            #line default
            #line hidden
            this.Write(@"_', variables('subNetName'))]"",
        ""dependsOn"": [
            ""[resourceId('Microsoft.Web/sites',  variables('appServiceName'))]""
        ],
        ""apiVersion"": ""2018-11-01"",
        ""location"": ""[resourceGroup().location]"",
        ""properties"": {
            ""vnetResourceId"": ""[concat(variables('vNetName'), '/subnets/', variables('subNetName'))]"",
            ""isSwift"": true
        }
    },
    {
        ""type"": ""Microsoft.Web/sites/slots/virtualNetworkConnections"",
        ""name"": ""[concat(variables('appServiceName'), '/', variables('appServiceCustomHostname'), '/");
            
            #line 511 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(appId));
            
            #line default
            #line hidden
            this.Write(@"_', variables('subNetName'))]"",
        ""dependsOn"": [
            ""[resourceId('Microsoft.Web/sites/slots', variables('appServiceName'), variables('appServiceCustomHostname'))]"",
            ""[resourceId('Microsoft.Web/sites', variables('appServiceName'))]""
        ],
        ""apiVersion"": ""2018-11-01"",
        ""location"": ""[resourceGroup().location]"",
        ""properties"": {
            ""vnetResourceId"": ""[concat(variables('vNetName'), '/subnets/', variables('subNetName'))]"",
            ""isSwift"": true
        }
    },
    ");
            
            #line 523 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 524 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (hasActionAlerts) {
            
            #line default
            #line hidden
            this.Write("    {\r\n      \"name\": \"[parameters(\'AlertObject\').alerts[copyIndex()].alertName]\"," +
                    "\r\n      \"type\": \"Microsoft.Insights/metricAlerts\",\r\n      \"location\": \"global\",\r" +
                    "\n      \"condition\": \"[equals(parameters(\'Alerts\'),\'Yes\')]\",\r\n      \"apiVersion\":" +
                    " \"2018-03-01\",\r\n      \"dependsOn\": [\r\n        \"[resourceId(\'Microsoft.Web/Sites\'" +
                    ", variables(\'appServiceName\'))]\"\r\n      ],\r\n      \"tags\": {},\r\n      \"copy\": {\r\n" +
                    "        \"name\": \"alertsCopy\",\r\n        \"count\": \"[length(parameters(\'AlertObject" +
                    "\').alerts)]\"\r\n      },\r\n      \"properties\": {\r\n        \"description\": \"[paramete" +
                    "rs(\'AlertObject\').alerts[copyIndex()].alertDescription]\",\r\n        \"severity\": \"" +
                    "[parameters(\'AlertObject\').alerts[copyIndex()].alertSeverity]\",\r\n        \"enable" +
                    "d\": true,\r\n        \"scopes\": [\r\n          \"[resourceID(\'Microsoft.Web/sites\',var" +
                    "iables(\'appServiceName\'))]\"\r\n        ],\r\n        \"evaluationFrequency\": \"[parame" +
                    "ters(\'AlertObject\').alerts[copyIndex()].evaluationFrequency]\",\r\n        \"windowS" +
                    "ize\": \"[parameters(\'AlertObject\').alerts[copyIndex()].windowSize]\",\r\n        \"cr" +
                    "iteria\": {\r\n          \"odata.type\": \"Microsoft.Azure.Monitor.MultipleResourceMul" +
                    "tipleMetricCriteria\",\r\n          \"allOf\": [\r\n            {\r\n              \"crite" +
                    "rionType\": \"DynamicThresholdCriterion\",\r\n              \"name\": \"1st criterion\",\r" +
                    "\n              \"metricName\": \"[parameters(\'AlertObject\').alerts[copyIndex()].met" +
                    "ricName]\",\r\n              \"dimensions\": [\r\n                {\r\n                  " +
                    "\"name\": \"[parameters(\'AlertObject\').alerts[copyIndex()].dimensionName]\",\r\n      " +
                    "            \"operator\": \"Include\",\r\n                  \"values\": [\r\n             " +
                    "       \"*\"\r\n                  ]\r\n\r\n                }\r\n              ],\r\n        " +
                    "      \"operator\": \"[parameters(\'AlertObject\').alerts[copyIndex()].operator]\",\r\n " +
                    "             \"alertSensitivity\": \"[parameters(\'AlertObject\').alerts[copyIndex()]" +
                    ".alertSensitivity]\",\r\n              \"failingPeriods\": {\r\n                \"number" +
                    "OfEvaluationPeriods\": \"[parameters(\'AlertObject\').alerts[copyIndex()].numberOfEv" +
                    "aluationPeriods]\",\r\n                \"minFailingPeriodsToAlert\": \"[parameters(\'Al" +
                    "ertObject\').alerts[copyIndex()].minFailingPeriodsToAlert]\"\r\n              },\r\n  " +
                    "            \"timeAggregation\": \"[parameters(\'AlertObject\').alerts[copyIndex()].t" +
                    "imeAggregation]\"\r\n            }\r\n          ]\r\n        },\r\n        \"actions\": [\r\n" +
                    "          {\r\n            \"actionGroupId\": \"[resourceId(\'Microsoft.Insights/actio" +
                    "nGroups\', parameters(\'AlertObject\').alerts[copyIndex()].actionGroupName)]\"\r\n    " +
                    "      }\r\n        ]\r\n      }\r\n    },\r\n    ");
            
            #line 582 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 583 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (hasSlots) {
            
            #line default
            #line hidden
            this.Write(@"    {
      ""apiVersion"": ""2019-08-01"",
      ""type"": ""Microsoft.Web/sites/slots"",
      ""name"": ""[concat(variables('appServiceName'), '/', toLower(variables('appServiceBlueSlotName')))]"",
      ""dependsOn"": [
        ""[resourceId('Microsoft.Web/Sites', variables('appServiceName'))]""
      ],
      ""location"": ""[resourceGroup().location]"",
      ""tags"": ""[variables('resourceTags')]"",
      ""kind"": """);
            
            #line 593 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kind));
            
            #line default
            #line hidden
            this.Write("\",\r\n      \"properties\": {\r\n        \"serverFarmId\": \"[resourceId(\'Microsoft.Web/se" +
                    "rverfarms\', variables(\'appServicePlanName\'))]\",\r\n        \"siteConfig\": {\r\n      " +
                    "    ");
            
            #line 597 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (dotnetcore) {
            
            #line default
            #line hidden
            this.Write("          \"metadata\": [\r\n            {\r\n              \"name\": \"CURRENT_STACK\",\r\n " +
                    "             \"value\": \"dotnetcore\"\r\n            }\r\n          ],\r\n          ");
            
            #line 604 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write("          \"minTlsVersion\": 1.2,\r\n          \"alwaysOn\": true,\r\n          \"use32Bit" +
                    "WorkerProcess\": true,\r\n           ");
            
            #line 608 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (islinux && dotnetcore && !isContainer) {
            
            #line default
            #line hidden
            this.Write("          \"linuxFxVersion\": \"DOTNETCORE|");
            
            #line 609 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dotnetversion));
            
            #line default
            #line hidden
            this.Write("\",\r\n          \"appCommandLine\": \"dotnet /home/site/wwwroot/");
            
            #line 610 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dotnetstartupdll));
            
            #line default
            #line hidden
            this.Write("\",\r\n          ");
            
            #line 611 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write(@"          ""virtualApplications"": [
            {
                ""virtualPath"": ""/"",
                ""physicalPath"": ""site\\wwwroot"",
                ""preloadEnabled"": false
            }
          ]
        },
        ""httpsOnly"": true,
        ""clientAffinityEnabled"": true
      },
      ""identity"": {
        ""type"": ""SystemAssigned""
      }
    },
    ");
            
            #line 627 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (customDns) {
            
            #line default
            #line hidden
            this.Write(@"    {
      ""type"": ""Microsoft.Web/sites/slots/hostnameBindings"",
      ""name"": ""[concat(variables('appServiceName'), '/', toLower(variables('appServiceBlueSlotName')), '/', variables('appServiceBlueSlotCustomHostname'))]"",
      ""dependsOn"": [
        ""[resourceId('Microsoft.Web/sites/hostnameBindings', variables('appServiceName'), variables('appServiceCustomHostname'))]"",
        ""[resourceId('Microsoft.Web/sites/slots/', variables('appServiceName'), variables('appServiceBlueSlotName'))]""
      ],
      ""apiVersion"": ""2019-08-01"",
      ""location"": ""[resourceGroup().location]"",
      ""properties"": {
        ""sslState"": ""SniEnabled"",
        ""thumbprint"": ""[reference(resourceId('Microsoft.Web/certificates', variables('appServiceSslCertificateName')), '2019-08-01').Thumbprint]""
      }
    },
    ");
            
            #line 642 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}}
            
            #line default
            #line hidden
            this.Write("    {\r\n      \"type\": \"Microsoft.Resources/deployments\",\r\n      \"apiVersion\": \"201" +
                    "8-05-01\",\r\n      \"name\": \"[concat(variables(\'appServiceName\'), \'-app-service-con" +
                    "figuration\')]\",\r\n      \"comments\": \"A nested deployment is used to deploy the ap" +
                    "p settings into the production and blue slots. A nested deployment is used to al" +
                    "low the deployment of the settings to be conditional.\",\r\n      \"dependsOn\": [\r\n " +
                    "       \"[concat(\'Microsoft.Web/sites/\', variables(\'appServiceName\'))]\"\r\n      ]," +
                    "\r\n      \"properties\": {\r\n        \"mode\": \"Incremental\",\r\n        \"expressionEval" +
                    "uationOptions\": {\r\n          \"scope\": \"inner\"\r\n        },\r\n        \"template\": {" +
                    "\r\n          \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/d" +
                    "eploymentTemplate.json#\",\r\n          \"contentVersion\": \"1.0.0.0\",\r\n          \"pa" +
                    "rameters\": {\r\n            \"deployAppSettings\": {\r\n              \"type\": \"bool\"\r\n" +
                    "            },\r\n            \"appServiceName\": {\r\n              \"type\": \"string\"\r" +
                    "\n            },\r\n            \"appServiceBlueSlotName\": {\r\n              \"type\": " +
                    "\"string\"\r\n            },\r\n            \"appInsightsInstrumentationKey\": {\r\n      " +
                    "        \"type\": \"secureString\"\r\n            },\r\n            \"appInsightsConnecti" +
                    "onString\": {\r\n              \"type\": \"secureString\"\r\n            },\r\n            " +
                    "\"scmDetectorPageLink\": {\r\n              \"type\": \"string\"\r\n            },\r\n      " +
                    "      \"productionSpecificSettings\": {\r\n              \"type\": \"object\"\r\n         " +
                    "   },\r\n            \"slotSpecificSettings\": {\r\n              \"type\": \"object\"\r\n  " +
                    "          },\r\n            \"appConnectionstrings\": {\r\n              \"type\": \"obje" +
                    "ct\"\r\n            },\r\n            \"slotConnectionstringSettings\": {\r\n            " +
                    "  \"type\": \"object\"\r\n            },\r\n            \"serviceBusNamespace\": {\r\n      " +
                    "        \"type\": \"String\"\r\n            },\r\n            \"relayResourceGroupName\": " +
                    "{\r\n              \"type\": \"String\"\r\n            },\r\n            \"deploymentLocati" +
                    "on\": {\r\n              \"type\": \"String\"\r\n            },\r\n            \"environment" +
                    "\": {\r\n              \"type\": \"String\"\r\n            },\r\n            \"vNetName\": {\r" +
                    "\n              \"type\": \"String\"\r\n            },\r\n            \"subNetName\": {\r\n  " +
                    "            \"type\": \"String\"\r\n            }\r\n          },\r\n          \"variables\"" +
                    ": {\r\n            \"environment\": \"[parameters(\'environment\')]\",\r\n            \"app" +
                    "ServiceName\": \"[parameters(\'appServiceName\')]\",\r\n            \"vNetName\": \"[param" +
                    "eters(\'vNetName\')]\",\r\n            \"subNetName\": \"[parameters(\'subNetName\')]\",\r\n " +
                    "           \"appServiceBlueSlotName\": \"[parameters(\'appServiceBlueSlotName\')]\",\r\n" +
                    "            \"appInsightsInstrumentationKey\": \"[parameters(\'appInsightsInstrument" +
                    "ationKey\')]\",\r\n            \"appInsightsConnectionString\": \"[parameters(\'appInsig" +
                    "htsConnectionString\')]\",\r\n            \"scmDetectorPageLink\": \"[parameters(\'scmDe" +
                    "tectorPageLink\')]\",\r\n            \"appSettings\": {\r\n            ");
            
            #line 719 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (useVnetIntegration) {
            
            #line default
            #line hidden
            this.Write("              \"WEBSITE_VNET_ROUTE_ALL\": \"1\",  \r\n            ");
            
            #line 721 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write(@"              ""APPINSIGHTS_INSTRUMENTATIONKEY"": ""[variables('appInsightsInstrumentationKey')]"",
              ""APPLICATIONINSIGHTS_CONNECTION_STRING"": ""[variables('appInsightsConnectionString')]"",
              ""APPINSIGHTS_PROFILERFEATURE_VERSION"": ""disabled"",
              ""APPINSIGHTS_SNAPSHOTFEATURE_VERSION"": ""disabled"",
              ""ApplicationInsightsAgent_EXTENSION_VERSION"": ""~2"",
              ""DiagnosticServices_EXTENSION_VERSION"": ""disabled"",
              ""InstrumentationEngine_EXTENSION_VERSION"": ""disabled"",
              ""SnapshotDebugger_EXTENSION_VERSION"": ""disabled"",
              ""XDT_MicrosoftApplicationInsights_BaseExtensions"": ""disabled"",
              ""XDT_MicrosoftApplicationInsights_Mode"": ""default""
            },
            ""autoProductionSpecificSettings"": {
            },
            ""autoSlotSpecificSettings"": {
            },
            ""productionSpecificSettings"": ""[parameters('productionSpecificSettings')]"",
            ""slotSpecificSettings"": ""[parameters('slotSpecificSettings')]"",
            ""appConnectionstrings"": ""[parameters('appConnectionstrings')]"",
            ""slotConnectionstringSettings"": ""[parameters('slotConnectionstringSettings')]"",
            ""deploymentLocation"": ""[parameters('deploymentLocation')]"",
            ""serviceBusNamespace"": ""[parameters('serviceBusNamespace')]"",
            ""relayResourceGroupName"": ""[parameters('relayResourceGroupName')]""
          },
          ""resources"": [
            ");
            
            #line 746 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"

            for (Int32 ips = 0; ips < data.RelayConfiguration.Length; ++ips) {
                var relayData = data.RelayConfiguration[ips];
                var rn = $"concat(variables('environment'), '-', '{relayData}')";
            
            
            #line default
            #line hidden
            this.Write(@"{
                ""condition"": ""[equals(bool('true'), parameters('deployAppSettings'))]"",
                ""apiVersion"": ""2018-11-01"",
                ""name"": ""[concat(variables('appServiceName'), '/', variables('serviceBusNamespace'), '/', concat(variables('environment'), '-', '");
            
            #line 753 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rn));
            
            #line default
            #line hidden
            this.Write(@"'))]"",
                ""type"": ""Microsoft.Web/sites/hybridConnectionNamespaces/relays"",
                ""comments"": ""Deploy relay"",
                ""properties"": {
                    ""serviceBusNamespace"": ""[variables('serviceBusNamespace')]"",
                    ""relayName"": ""[concat(variables('environment'), '-', '");
            
            #line 758 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relayData));
            
            #line default
            #line hidden
            this.Write("\')]\",\r\n                    \"relayArmUri\": \"[resourceId(parameters(\'relayResourceG" +
                    "roupName\'), \'Microsoft.Relay/Namespaces/Hybridconnections\', parameters(\'serviceB" +
                    "usNamespace\'), \'");
            
            #line 759 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rn));
            
            #line default
            #line hidden
            this.Write("\')]\",\r\n                    \"hostName\": \"[split(json(reference(resourceId(paramete" +
                    "rs(\'relayResourceGroupName\'), \'Microsoft.Relay/Namespaces/Hybridconnections\', pa" +
                    "rameters(\'serviceBusNamespace\'), \'");
            
            #line 760 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rn));
            
            #line default
            #line hidden
            this.Write("\'), \'2016-07-01\').userMetadata)[0].value, \':\')[0]]\",\r\n                    \"port\":" +
                    " \"[split(json(reference(resourceId(parameters(\'relayResourceGroupName\'), \'Micros" +
                    "oft.Relay/Namespaces/Hybridconnections\', parameters(\'serviceBusNamespace\'), \'");
            
            #line 761 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rn));
            
            #line default
            #line hidden
            this.Write(@"'), '2016-07-01').userMetadata)[0].value, ':')[1]]"",
                    ""sendKeyName"": ""defaultSender"",
                    ""sendKeyValue"": ""[listkeys(concat(resourceId(parameters('relayResourceGroupName'), 'Microsoft.Relay/Namespaces/Hybridconnections', parameters('serviceBusNamespace'), '");
            
            #line 763 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rn));
            
            #line default
            #line hidden
            this.Write("\'), \'/authorizationRules/defaultSender\'), \'2017-04-01\').primaryKey]\"\r\n           " +
                    "     }\r\n            },\r\n            ");
            
            #line 766 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (hasSlots) {
            
            #line default
            #line hidden
            this.Write(@"            {
                ""condition"": ""[equals(bool('true'), parameters('deployAppSettings'))]"",
                ""apiVersion"": ""2018-11-01"",
                ""name"": ""[concat(variables('appServiceName'), '/', toLower(variables('appServiceBlueSlotName')), '/', variables('serviceBusNamespace'), '/', '");
            
            #line 770 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relayData));
            
            #line default
            #line hidden
            this.Write(@"')]"",
                ""type"": ""Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays"",
                ""comments"": ""Deploy relay"",
                ""properties"": {
                    ""serviceBusNamespace"": ""[variables('serviceBusNamespace')]"",
                    ""relayName"": ""[concat(variables('environment'), '-', '");
            
            #line 775 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relayData));
            
            #line default
            #line hidden
            this.Write("\')]\",\r\n                    \"relayArmUri\": \"[resourceId(parameters(\'relayResourceG" +
                    "roupName\'), \'Microsoft.Relay/Namespaces/Hybridconnections\', parameters(\'serviceB" +
                    "usNamespace\'), \'");
            
            #line 776 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rn));
            
            #line default
            #line hidden
            this.Write("\')]\",\r\n                    \"hostName\": \"[split(json(reference(resourceId(paramete" +
                    "rs(\'relayResourceGroupName\'), \'Microsoft.Relay/Namespaces/Hybridconnections\', pa" +
                    "rameters(\'serviceBusNamespace\'), \'");
            
            #line 777 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rn));
            
            #line default
            #line hidden
            this.Write("\'), \'2016-07-01\').userMetadata)[0].value, \':\')[0]]\",\r\n                    \"port\":" +
                    " \"[split(json(reference(resourceId(parameters(\'relayResourceGroupName\'), \'Micros" +
                    "oft.Relay/Namespaces/Hybridconnections\', parameters(\'serviceBusNamespace\'), \'");
            
            #line 778 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rn));
            
            #line default
            #line hidden
            this.Write(@"'), '2016-07-01').userMetadata)[0].value, ':')[1]]"",
                    ""sendKeyName"": ""defaultSender"",
                    ""sendKeyValue"": ""[listkeys(concat(resourceId(parameters('relayResourceGroupName'), 'Microsoft.Relay/Namespaces/Hybridconnections', parameters('serviceBusNamespace'), '");
            
            #line 780 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rn));
            
            #line default
            #line hidden
            this.Write("\'), \'/authorizationRules/defaultSender\'), \'2017-04-01\').primaryKey]\"\r\n           " +
                    "      }\r\n            },\r\n            ");
            
            #line 783 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}}
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 785 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (hasSlots) {
            
            #line default
            #line hidden
            this.Write("            {\r\n              \"condition\": \"[equals(bool(\'true\'), parameters(\'depl" +
                    "oyAppSettings\'))]\",\r\n              \"apiVersion\": \"2019-08-01\",\r\n              \"t" +
                    "ype\": \"Microsoft.Web/sites/slots/config\",\r\n              \"name\": \"[concat(variab" +
                    "les(\'appServiceName\'), \'/\', toLower(variables(\'appServiceBlueSlotName\')), \'/\', \'" +
                    "appsettings\')]\",\r\n              \"comments\": \"Deploy the app settings to the blue" +
                    " slot. This is only done when the slotSwapStatus for the app is null. This ensur" +
                    "es that the first deployment of the template sets all resources up correctly, an" +
                    "d ensures that future deploys (once at least one slot swap has happened) do not " +
                    "deploy settings into the blue slot.\",\r\n              \"properties\": \"[union(varia" +
                    "bles(\'appSettings\'), variables(\'autoSlotSpecificSettings\'), variables(\'slotSpeci" +
                    "ficSettings\'))]\"\r\n            },\r\n            {\r\n              \"condition\": \"[eq" +
                    "uals(bool(\'true\'), parameters(\'deployAppSettings\'))]\",\r\n              \"apiVersio" +
                    "n\": \"2019-08-01\",\r\n              \"type\": \"Microsoft.Web/sites/slots/config\",\r\n  " +
                    "            \"name\": \"[concat(variables(\'appServiceName\'), \'/\', toLower(variables" +
                    "(\'appServiceBlueSlotName\')), \'/\', \'connectionstrings\')]\",\r\n              \"commen" +
                    "ts\": \"Deploy the connectionstring settings to the custom slot.\",\r\n              " +
                    "\"properties\": \"[variables(\'slotConnectionstringSettings\')]\"\r\n            },\r\n   " +
                    "         {\r\n              \"condition\": \"[equals(bool(\'true\'), parameters(\'deploy" +
                    "AppSettings\'))]\",\r\n              \"apiVersion\": \"2019-08-01\",\r\n              \"typ" +
                    "e\": \"Microsoft.Web/sites/slots/config\",\r\n              \"name\": \"[concat(variable" +
                    "s(\'appServiceName\'), \'/\', toLower(variables(\'appServiceBlueSlotName\')), \'/\', \'we" +
                    "b\')]\",\r\n              \"comments\": \"ipSecurityRestrictions for custom slot.\",\r\n  " +
                    "            \"properties\": {\r\n                ");
            
            #line 809 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
 if (!string.IsNullOrEmpty(ipSecurityRestrictions)) {
            
            #line default
            #line hidden
            this.Write("                  \"ipSecurityRestrictions\": [\r\n                      {\r\n         " +
                    "               \"ipAddress\": \"");
            
            #line 812 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ipSecurityRestrictions));
            
            #line default
            #line hidden
            this.Write("\",\r\n                        \"action\": \"Allow\",\r\n                        \"tag\": \"D" +
                    "efault\",\r\n                        \"priority\": 101,\r\n                        \"nam" +
                    "e\": \"Allow Internal Traffic Only\",\r\n                        \"description\": \"");
            
            #line 817 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(internalNetworkName));
            
            #line default
            #line hidden
            this.Write("\"\r\n                      }\r\n                    ],\r\n                    \"scmIpSec" +
                    "urityRestrictions\": [\r\n                      {\r\n                        \"ipAddre" +
                    "ss\": \"");
            
            #line 822 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ipSecurityRestrictions));
            
            #line default
            #line hidden
            this.Write("\",\r\n                        \"action\": \"Allow\",\r\n                        \"tag\": \"D" +
                    "efault\",\r\n                        \"priority\": 100,\r\n                        \"nam" +
                    "e\": \"Allow Internal Traffic Only\",\r\n                        \"description\": \"");
            
            #line 827 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(internalNetworkName));
            
            #line default
            #line hidden
            this.Write("\"\r\n                      }\r\n                    ],\r\n                ");
            
            #line 830 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write("                \"scmIpSecurityRestrictionsUseMain\": \"false\"\r\n              }\r\n   " +
                    "         },\r\n            ");
            
            #line 834 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write("            {\r\n              \"condition\": \"[equals(bool(\'true\'), parameters(\'depl" +
                    "oyAppSettings\'))]\",\r\n              \"apiVersion\": \"2018-11-01\",\r\n              \"n" +
                    "ame\": \"[concat(variables(\'appServiceName\') ,\'/appsettings\')]\",\r\n              \"t" +
                    "ype\": \"Microsoft.Web/sites/config\",\r\n              \"comments\": \"Deploy the app s" +
                    "ettings to the production slot. This is only done when the slotSwapStatus for th" +
                    "e api app is null. This ensures that the first deployment of the template sets a" +
                    "ll resources up correctly, and ensures that future deploys (once at least one sl" +
                    "ot swap has happened) do not deploy directly into the production slot.\",\r\n      " +
                    "        \"properties\": \"[union(variables(\'appSettings\'), variables(\'autoProductio" +
                    "nSpecificSettings\'), variables(\'productionSpecificSettings\'))]\"\r\n            },\r" +
                    "\n            {\r\n              \"condition\": \"[equals(bool(\'true\'), parameters(\'de" +
                    "ployAppSettings\'))]\",\r\n              \"apiVersion\": \"2018-11-01\",\r\n              " +
                    "\"name\": \"[concat(variables(\'appServiceName\') ,\'/connectionstrings\')]\",\r\n        " +
                    "      \"type\": \"Microsoft.Web/sites/config\",\r\n              \"comments\": \"Deploy t" +
                    "he connectionstring settings to the production slot.\",\r\n              \"propertie" +
                    "s\": \"[variables(\'appConnectionstrings\')]\"\r\n            },\r\n            {\r\n      " +
                    "        \"condition\": \"[equals(bool(\'true\'), parameters(\'deployAppSettings\'))]\",\r" +
                    "\n              \"apiVersion\": \"2018-11-01\",\r\n              \"name\": \"[concat(varia" +
                    "bles(\'appServiceName\') ,\'/slotconfignames\')]\",\r\n              \"type\": \"Microsoft" +
                    ".Web/sites/config\",\r\n              \"properties\": {\r\n                \"appSettingN" +
                    "ames\": []\r\n              }\r\n            }\r\n          ],\r\n          \"outputs\": {\r" +
                    "\n          }\r\n        },\r\n        \"parameters\": {\r\n          \"deployAppSettings\"" +
                    ": {\r\n            \"value\": true\r\n          },\r\n          \"appServiceName\": {\r\n   " +
                    "         \"value\": \"[variables(\'appServiceName\')]\"\r\n          },\r\n          \"vNet" +
                    "Name\": {\r\n            \"value\": \"[variables(\'vNetName\')]\"\r\n          },\r\n        " +
                    "  \"subNetName\": {\r\n            \"value\": \"[variables(\'subNetName\')]\"\r\n          }" +
                    ",\r\n          \"appServiceBlueSlotName\": {\r\n            \"value\": \"[variables(\'appS" +
                    "erviceBlueSlotName\')]\"\r\n          },\r\n          \"appInsightsInstrumentationKey\":" +
                    " {\r\n            \"value\": \"[reference(resourceId(\'Microsoft.Insights/components\'," +
                    " variables(\'apiAppInsightsName\')), \'2015-05-01\').InstrumentationKey]\"\r\n         " +
                    " },\r\n          \"appInsightsConnectionString\": {\r\n            \"value\": \"[referenc" +
                    "e(resourceId(\'Microsoft.Insights/components\', variables(\'apiAppInsightsName\')), " +
                    "\'2015-05-01\').ConnectionString]\"\r\n          },\r\n          \"scmDetectorPageLink\":" +
                    " {\r\n            \"value\": \"[variables(\'scmDetectorPageLink\')]\"\r\n          },\r\n   " +
                    "       \"productionSpecificSettings\": {\r\n            \"value\": \"[variables(\'produc" +
                    "tionSpecificSettings\')]\"\r\n          },\r\n          \"slotSpecificSettings\": {\r\n   " +
                    "         \"value\": \"[variables(\'slotSpecificSettings\')]\"\r\n          },\r\n         " +
                    " \"appConnectionstrings\": {\r\n            \"value\": \"[variables(\'appConnectionstrin" +
                    "gs\')]\"\r\n          },\r\n          \"slotConnectionstringSettings\": {\r\n            \"" +
                    "value\": \"[variables(\'slotConnectionstringSettings\')]\"\r\n          },\r\n          \"" +
                    "serviceBusNamespace\": {\r\n            \"value\": \"[variables(\'serviceBusNamespace\')" +
                    "]\"\r\n          },\r\n          \"relayResourceGroupName\": {\r\n            \"value\": \"[" +
                    "variables(\'relayResourceGroupName\')]\"\r\n          },\r\n          \"deploymentLocati" +
                    "on\": {\r\n            \"value\": \"[variables(\'deploymentLocation\')]\"\r\n          },\r\n" +
                    "          \"environment\": {\r\n            \"value\": \"[variables(\'environment\')]\"\r\n " +
                    "         }\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"outputs\": {\r\n  }\r\n}\r\n\r\n\r\n");
            
            #line 922 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"

// END TEMPLATE CODE

SaveOutputToSubFolder(codeGenPath, $"{data.Id}\\{data.TeamName.ToLower()}-{data.Name.ToLower()}-infra\\ArmTemplate", "azuredeploy.json");    

            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 929 "C:\research\azure-deploy\CodeTemplates\AzureFunctionDeployment.tt"

private void SaveOutputToSubFolder(string rootTemplatePath, string folderName, string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(rootTemplatePath.Replace('\\', Path.DirectorySeparatorChar));
  string newDirectoryName = Path.Combine(templateDirectory,folderName.Replace('\\', Path.DirectorySeparatorChar));
  if(!Directory.Exists(newDirectoryName))
  {  
	Directory.CreateDirectory(newDirectoryName);
  }
  string outputFilePath = Path.Combine(newDirectoryName, outputFileName.Replace('\\', Path.DirectorySeparatorChar));
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}

private readonly string deployment;
private readonly string rootTemplatePath;
public AzureFunctionDeployment(string deployment, string rootTemplatePath) {
    this.deployment = deployment;
    this.rootTemplatePath = rootTemplatePath;
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class AzureFunctionDeploymentBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
