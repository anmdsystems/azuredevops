// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ngCodeGen.CodeTemplates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    using System.IO;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AGWIngressDeployment : AGWIngressDeploymentBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            
            #line 14 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

Deployment data = JsonConvert.DeserializeObject<Deployment>(this.deployment);

var ipSecurityRestrictions = data.IpSecurityRestrictions;
var internalNetworkName = data.InternalNetworkName;
var application = data.TeamDisplayName;
var appName = data.Name;
var teamName = data.TeamName;
var applicationType = data.ApplicationType;
var owner = data.Owner;
var resourceGroupConfigKVSuffix = data.ResourceGroupConfigKVSuffix;

var stages = data.IngressDeploymentStages;

// DO NOT WIPE THE SOURCE CODE...
var codeGenPath = $"{this.rootTemplatePath}codegen\\";

// provision deployment stages   
for (Int32 i = 0; i < stages.Length; ++i) {
	var frontendPort = "80";
    var backendPort = "443";
    var stage = stages[i];
    var stageFileName = $"azuredeploy.agw.{stage.Name}.json";
    var location = stage.DeploymentLocation;
    var applicationGatewayName = stage.ApplicationGatewayName;
    var dnsnamepip = $"{applicationGatewayName}-pip";
    var connectionDrainingTimeout = stage.ConnectionDrainingTimeout;
    var connectionDrainingEnabled = Utility.LowercaseFirst(stage.ConnectionDrainingEnabled.ToString());
    var tier = stage.Tier;
    var sku = stage.Sku;
    var allocationMethod = stage.AllocationMethod;
    var cookieBasedAffinity = stage.CookieBasedAffinity;
    var affinityCookieName = stage.AffinityCookieName;
    var storageaccountname = stage.Storageaccountname;
    var storageaccountrgname = stage.Storageaccountrgname;
    var enablediagnostics = stage.Enablediagnostics;
    var environment = stage.Environment;
    var certSecretName = stage.CertSecretName;
    var vaultName = stage.CertKeyVaultName;
    var vaultrgname = stage.CertKeyVaultRG;
    var subnetName = stage.SubnetName;
    var virtualNetworkResourceGroup = stage.VirtualNetworkResourceGroup;
    var virtualNetworkName = stage.VirtualNetworkName;
    var autoScaleMaxCapacity = stage.AutoScaleMaxCapacity;
    var capacity = stage.Capacity;
    var diagnosticSettingName = stage.DiagnosticSettingName;
    var firewallMode = stage.FirewallMode;
    var teamRg = stage.Webapprg;
    var multiRegion = (data.IsMultiRegion) ? "[concat('-', variables('location')]" : "";

            
            #line default
            #line hidden
            this.Write(@"{
  ""$schema"": ""http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"",
  ""contentVersion"": ""1.0.0.0"",
  ""parameters"": {
    ""KeyVaultAccessPolicies"": {
      ""type"": ""object"",
      ""defaultValue"": { ""list"": [] },
      ""metadata"": {
        ""description"": ""The access policies to be applied to the Key Vault. Defaults to no access policies.""
      }
    }
  },
  ""variables"": {
    ""location"": """);
            
            #line 76 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(location));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"teamRg\": \"");
            
            #line 77 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(teamRg));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"applicationGatewayName\": \"");
            
            #line 78 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(applicationGatewayName));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"dnsnamepip\": \"");
            
            #line 79 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dnsnamepip));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"tier\": \"");
            
            #line 80 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tier));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"capacity\": ");
            
            #line 81 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(capacity));
            
            #line default
            #line hidden
            this.Write(",\r\n    \"sku\": \"");
            
            #line 82 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sku));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"allocationMethod\": \"");
            
            #line 83 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(allocationMethod));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"frontendPort\": \"");
            
            #line 84 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(frontendPort));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"backendPort\": \"");
            
            #line 85 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(backendPort));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"keyVaultAccessPolicies\": \"[parameters(\'KeyVaultAccessPolicies\')]\",\r\n    " +
                    "\"cookieBasedAffinity\": \"");
            
            #line 87 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cookieBasedAffinity));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"storageaccountname\": \"");
            
            #line 88 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(storageaccountname));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"storageaccountrgname\": \"");
            
            #line 89 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(storageaccountrgname));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"enablediagnostics\": \"");
            
            #line 90 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enablediagnostics));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"diagnosticSettingName\": \"");
            
            #line 91 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(diagnosticSettingName));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"autoScaleMaxCapacity\": \"");
            
            #line 92 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(autoScaleMaxCapacity));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"virtualNetworkName\": \"");
            
            #line 93 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(virtualNetworkName));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"virtualNetworkResourceGroup\": \"");
            
            #line 94 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(virtualNetworkResourceGroup));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"subnetName\": \"");
            
            #line 95 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(subnetName));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"certSecretName\": \"");
            
            #line 96 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(certSecretName));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"iprestrictions\": \"");
            
            #line 97 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ipSecurityRestrictions));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"tagEnvironment\": \"");
            
            #line 98 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(environment));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"managedIdentityName\": \"[concat(\'");
            
            #line 99 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(teamName));
            
            #line default
            #line hidden
            this.Write("\', \'-\', \'");
            
            #line 99 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(environment));
            
            #line default
            #line hidden
            this.Write("\', \'");
            
            #line 99 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(multiRegion));
            
            #line default
            #line hidden
            this.Write(@"', '-user-assigned')]"",
    ""subnetRef"": ""[resourceId(variables('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]"",
    ""applicationGatewayID"": ""[resourceId('Microsoft.Network/applicationGateways',variables('applicationGatewayName'))]"",
    ""appGwPublicIpName"": ""[concat(variables('applicationGatewayName'), '-pip')]"",
    ""publicIPRef"": ""[resourceId('Microsoft.Network/publicIPAddresses',variables('appGwPublicIpName'))]"",
    ""keyVaultResourceId"": ""[resourceId('");
            
            #line 104 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vaultrgname));
            
            #line default
            #line hidden
            this.Write("\',\'Microsoft.KeyVault/vaults/secrets\',\'");
            
            #line 104 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vaultName));
            
            #line default
            #line hidden
            this.Write("\',variables(\'certSecretName\'))]\"\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"apiVersio" +
                    "n\": \"2018-11-30\",\r\n      \"name\": \"[variables(\'managedIdentityName\')]\",\r\n      \"t" +
                    "ype\": \"Microsoft.ManagedIdentity/userAssignedIdentities\",\r\n      \"location\": \"[v" +
                    "ariables(\'location\')]\",\r\n      \"properties\": {\r\n        \"mode\": \"Incremental\"\r\n " +
                    "     }\r\n    },\r\n    {\r\n      \"condition\": \"[empty(variables(\'keyVaultAccessPolic" +
                    "ies\').list)]\",\r\n      \"name\": \"[concat(variables(\'CertKeyVaultName\'),\'/add\')]\",\r" +
                    "\n      \"type\": \"Microsoft.KeyVault/vaults/accessPolicies\",\r\n      \"apiVersion\": " +
                    "\"2018-02-14\",\r\n      \"dependsOn\": [\r\n        \"[variables(\'managedIdentityName\')]" +
                    "\"\r\n      ],\r\n      \"properties\": {\r\n        \"accessPolicies\": [{\r\n           \"te" +
                    "nantId\": \"[subscription().tenantId]\",\r\n           \"objectId\": \"[reference(concat" +
                    "(\'Microsoft.ManagedIdentity/userAssignedIdentities/\', variables(\'managedIdentity" +
                    "Name\'))).principalId]\",\r\n           \"permissions\": {\r\n              \"keys\": [\r\n " +
                    "               \"get\",\r\n                \"list\"\r\n               ],\r\n              " +
                    " \"secrets\": [\r\n                 \"get\",\r\n                 \"list\"\r\n               " +
                    "],\r\n               \"certificates\": [\r\n                 \"get\"\r\n               ]\r\n" +
                    "            }\r\n        }]\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"Microsoft.Netw" +
                    "ork/applicationGateways\",\r\n      \"apiVersion\": \"2019-02-01\",\r\n      \"name\": \"[va" +
                    "riables(\'applicationGatewayName\')]\",\r\n      \"location\": \"[variables(\'location\')]" +
                    "\",\r\n      \"dependsOn\": [\r\n        \"[concat(\'Microsoft.ManagedIdentity/userAssign" +
                    "edIdentities/\', variables(\'managedIdentityName\'))]\",\r\n        \"[concat(\'Microsof" +
                    "t.Network/publicIPAddresses/\', variables(\'appGwPublicIpName\'))]\"\r\n      ],\r\n    " +
                    "  \"tags\": {\r\n        \"Application\": \"");
            
            #line 154 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(application));
            
            #line default
            #line hidden
            this.Write("\",\r\n        \"Owner\": \"");
            
            #line 155 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(owner));
            
            #line default
            #line hidden
            this.Write("\",\r\n        \"Environment\": \"[variables(\'tagEnvironment\')]\"\r\n      },\r\n      \"iden" +
                    "tity\": {\r\n        \"type\": \"UserAssigned\",\r\n        \"userAssignedIdentities\": {\r\n" +
                    "          \"[resourceId(variables(\'teamRg\'), \'Microsoft.ManagedIdentity/userAssig" +
                    "nedIdentities/\', variables(\'managedIdentityName\'))]\":{}\r\n        }\r\n      },\r\n  " +
                    "    \"properties\": {\r\n        \"sku\": {\r\n          \"name\": \"[variables(\'tier\')]\",\r" +
                    "\n          \"tier\": \"[variables(\'tier\')]\"\r\n        },\r\n        \"sslCertificates\":" +
                    " [\r\n          {\r\n            \"name\": \"appGatewaySslCert\",\r\n            \"properti" +
                    "es\": {\r\n              \"keyVaultSecretId\": \"[reference(variables(\'keyVaultResourc" +
                    "eId\'), \'2018-02-14\').secretUriWithVersion]\",\r\n              \"publicCertData\": \"[" +
                    "variables(\'certSecretName\')]\"\r\n            }\r\n          }\r\n        ],\r\n        \"" +
                    "gatewayIPConfigurations\": [\r\n          {\r\n            \"name\": \"appGatewayIpConfi" +
                    "g\",\r\n            \"properties\": {\r\n              \"subnet\": {\r\n                \"id" +
                    "\": \"[variables(\'subnetRef\')]\"\r\n              }\r\n            }\r\n          }\r\n    " +
                    "    ],\r\n        \"frontendIPConfigurations\": [\r\n          {\r\n            \"name\": " +
                    "\"appGwPublicFrontendIp\",\r\n            \"properties\": {\r\n              \"PublicIPAd" +
                    "dress\": {\r\n                \"id\": \"[variables(\'publicIPRef\')]\"\r\n              }\r\n" +
                    "            }\r\n          }\r\n        ],\r\n        \"frontendPorts\": [\r\n          {\r" +
                    "\n            \"name\": \"httpPort\",\r\n            \"properties\": {\r\n              \"po" +
                    "rt\": 80\r\n            }\r\n          },\r\n          {\r\n            \"name\": \"httpsPor" +
                    "t\",\r\n            \"properties\": {\r\n              \"Port\": 443\r\n            }\r\n    " +
                    "      }\r\n        ],\r\n        \"backendAddressPools\": [\r\n          ");
            
            #line 213 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

            for (Int32 ips = 0; ips < stage.BackendAddressPools.Length; ++ips) {
                var setting = stage.BackendAddressPools[ips];
                var comma = (ips == stage.BackendAddressPools.Length - 1) ? "" : ",";
                var azureWebUrl = setting.Value;
                var backEndName = setting.Name;
                
            
            #line default
            #line hidden
            this.Write("                {\r\n                    \"name\": \"default-");
            
            #line 221 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(backEndName));
            
            #line default
            #line hidden
            this.Write("-pool\",\r\n                    \"properties\": {\r\n                      \"backendAddre" +
                    "sses\": [\r\n                        {\r\n                          \"fqdn\": \"");
            
            #line 225 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(azureWebUrl));
            
            #line default
            #line hidden
            this.Write("\"\r\n                        }\r\n                      ]\r\n                    }\r\n   " +
                    "             }");
            
            #line 229 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comma));
            
            #line default
            #line hidden
            this.Write("\r\n                ");
            
            #line 230 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

            }
          
            
            #line default
            #line hidden
            this.Write(@"        ],
        ""backendHttpSettingsCollection"": [
          {
            ""name"": ""defaulthttpsetting"",
            ""properties"": {
              ""port"": 80,
              ""protocol"": ""Http"",
              ""cookieBasedAffinity"": ""Disabled"",
              ""pickHostNameFromBackendAddress"": false,
              ""affinityCookieName"": ""ApplicationGatewayAffinity"",
              ""requestTimeout"": 30
            }
          },
          ");
            
            #line 246 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

            for (Int32 ips = 0; ips < stage.WebAppHosts.Length; ++ips) {
                var probeHost = stage.WebAppHosts[ips];
                var comma = (ips == stage.WebAppHosts.Length - 1) ? "" : ",";
                
            
            #line default
            #line hidden
            this.Write("{\r\n                    \"name\": \"bp-default-");
            
            #line 251 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(probeHost));
            
            #line default
            #line hidden
            this.Write("-80-443\",\r\n                    \"properties\": {\r\n                      \"Port\": \"[v" +
                    "ariables(\'backendPort\')]\",\r\n                      \"Protocol\": \"Https\",\r\n        " +
                    "              \"connectionDraining\": {\r\n                        \"enabled\": ");
            
            #line 256 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(connectionDrainingEnabled));
            
            #line default
            #line hidden
            this.Write(",\r\n                        \"drainTimeoutInSec\": ");
            
            #line 257 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(connectionDrainingTimeout));
            
            #line default
            #line hidden
            this.Write("\r\n                      },\r\n                      \"CookieBasedAffinity\": \"[variab" +
                    "les(\'cookieBasedAffinity\')]\",\r\n                      \"affinityCookieName\": \"");
            
            #line 260 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(affinityCookieName));
            
            #line default
            #line hidden
            this.Write("\",\r\n                      \"requestTimeout\": 30,\r\n                      \"pickHostN" +
                    "ameFromBackendAddress\": true,\r\n                      \"probe\": {\r\n               " +
                    "         \"id\": \"[concat(variables(\'applicationGatewayId\'), \'/probes/\', \'pb-defau" +
                    "lt-");
            
            #line 264 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(probeHost));
            
            #line default
            #line hidden
            this.Write("-80\')]\"\r\n                      }\r\n                    }\r\n                  }\r\n   " +
                    "               ");
            
            #line 268 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comma));
            
            #line default
            #line hidden
            this.Write("\r\n                ");
            
            #line 269 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

            }
          
            
            #line default
            #line hidden
            this.Write("        ],\r\n        \"httpListeners\": [\r\n          ");
            
            #line 274 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

            for (Int32 ips = 0; ips < stage.WebAppHosts.Length; ++ips) {
                var webAppUrl = stage.WebAppHosts[ips];
                var comma = (ips == stage.WebAppHosts.Length - 1) ? "" : ",";
                
            
            #line default
            #line hidden
            this.Write("{\r\n                    \"name\": \"fl-");
            
            #line 279 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(webAppUrl));
            
            #line default
            #line hidden
            this.Write(@"-80"",
                    ""properties"": {
                      ""frontendIPConfiguration"": {
                        ""id"": ""[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/frontendIPConfigurations/appGwPublicFrontendIp')]""
                      },
                      ""frontendPort"": {
                        ""id"": ""[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/frontendPorts/httpPort')]""
                      },
                      ""protocol"": ""Http"",
                      ""requireServerNameIndication"": false
                    }
                  },
                  {
                    ""name"": ""fl-");
            
            #line 292 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(webAppUrl));
            
            #line default
            #line hidden
            this.Write(@"-443"",
                    ""properties"": {
                      ""frontendIPConfiguration"": {
                        ""id"": ""[concat(variables('applicationGatewayId'), '/frontendIPConfigurations/appGwPublicFrontendIp')]""
                      },
                      ""frontendPort"": {
                        ""id"": ""[concat(variables('applicationGatewayId'), '/frontendPorts/httpsPort')]""
                      },
                      ""protocol"": ""Https"",
                      ""SslCertificate"": {
                        ""Id"": ""[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]""
                      }
                    }
                  }");
            
            #line 305 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comma));
            
            #line default
            #line hidden
            this.Write("\r\n                ");
            
            #line 306 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

            }
          
            
            #line default
            #line hidden
            this.Write("        ],\r\n        \"requestRoutingRules\": [ \r\n            ");
            
            #line 311 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

            for (Int32 ips = 0; ips < stage.WebAppHosts.Length; ++ips) {
                var webAppUrl = stage.WebAppHosts[ips];
                var comma = (ips == stage.WebAppHosts.Length - 1) ? "" : ",";
                
            
            #line default
            #line hidden
            this.Write("{\r\n                    \"name\": \"rr-");
            
            #line 316 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(webAppUrl));
            
            #line default
            #line hidden
            this.Write("-443\",\r\n                    \"properties\": {\r\n                      \"RuleType\": \"B" +
                    "asic\",\r\n                      \"httpListener\": {\r\n                        \"id\": \"" +
                    "[concat(variables(\'applicationGatewayId\'), \'/httpListeners/fl-");
            
            #line 320 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(webAppUrl));
            
            #line default
            #line hidden
            this.Write("-443\')]\"\r\n                      },\r\n                      \"backendAddressPool\": {" +
                    "\r\n                        \"id\": \"[concat(variables(\'applicationGatewayId\'), \'/ba" +
                    "ckendAddressPools/\', \'default-");
            
            #line 323 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(webAppUrl));
            
            #line default
            #line hidden
            this.Write(@"-pool')]""
                      },
                      ""backendHttpSettings"": {
                        ""id"": ""[concat(variables('applicationGatewayId'), '/backendHttpSettingsCollection/httpsetting')]""
                      }
                    }
                  },
                  {
                    ""name"": ""rr-");
            
            #line 331 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(webAppUrl));
            
            #line default
            #line hidden
            this.Write(@"-80"",
                    ""properties"": {
                      ""ruleType"": ""Basic"",
                      ""httpListener"": {
                        ""id"": ""[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/httpListeners/fl-");
            
            #line 335 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(webAppUrl));
            
            #line default
            #line hidden
            this.Write("-80\')]\"\r\n                      },\r\n                      \"redirectConfiguration\":" +
                    " {\r\n                        \"id\": \"[concat(resourceId(\'Microsoft.Network/applica" +
                    "tionGateways\', variables(\'applicationGatewayName\')), \'/redirectConfigurations/fl" +
                    "-");
            
            #line 338 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(webAppUrl));
            
            #line default
            #line hidden
            this.Write("-80-443\')]\"\r\n                      }\r\n                    }\r\n                  }");
            
            #line 341 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comma));
            
            #line default
            #line hidden
            this.Write("\r\n                ");
            
            #line 342 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

            }
          
            
            #line default
            #line hidden
            this.Write("        ],\r\n        \"enableHttp2\": false,\r\n        \"probes\": [\r\n            ");
            
            #line 348 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

            for (Int32 ips = 0; ips < stage.WebAppHosts.Length; ++ips) {
                var probeHost = stage.WebAppHosts[ips];
                var comma = (ips == stage.WebAppHosts.Length - 1) ? "" : ",";
                
            
            #line default
            #line hidden
            this.Write("{\r\n                    \"name\": \"pb-default-");
            
            #line 353 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(probeHost));
            
            #line default
            #line hidden
            this.Write("-80\",\r\n                    \"properties\": {\r\n                      \"backendHttpSet" +
                    "tings\": [\r\n                        {\r\n                          \"id\": \"[concat(v" +
                    "ariables(\'applicationGatewayId\'), \'/backendHttpSettingsCollection/bp-default-");
            
            #line 357 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(probeHost));
            
            #line default
            #line hidden
            this.Write(@"-80-443')]""
                        }
                      ],
                      ""interval"": 30,
                      ""minServers"": 0,
                      ""path"": ""/"",
                      ""protocol"": ""Https"",
                      ""timeout"": 30,
                      ""unhealthyThreshold"": 3,
                      ""pickHostNameFromBackendHttpSettings"": true
                    }
                  }
                  ");
            
            #line 369 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comma));
            
            #line default
            #line hidden
            this.Write("\r\n                ");
            
            #line 370 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

            }
          
            
            #line default
            #line hidden
            this.Write(@"        ],
        ""sslPolicy"": {
          ""policyType"": ""Custom"",
          ""minProtocolVersion"": ""TLSv1_2"",
          ""cipherSuites"": [
            ""TLS_RSA_WITH_AES_256_CBC_SHA256"",
            ""TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"",
            ""TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"",
            ""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"",
            ""TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"",
            ""TLS_RSA_WITH_AES_128_GCM_SHA256"",
            ""TLS_RSA_WITH_AES_128_CBC_SHA256""
          ]
        },
        ""redirectConfigurations"": [
          ");
            
            #line 388 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

            for (Int32 ips = 0; ips < stage.WebAppHosts.Length; ++ips) {
                var webAppUrl = stage.WebAppHosts[ips];
                var comma = (ips == stage.WebAppHosts.Length - 1) ? "" : ",";
                
            
            #line default
            #line hidden
            this.Write("{\r\n                    \"name\": \"fl-");
            
            #line 393 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(webAppUrl));
            
            #line default
            #line hidden
            this.Write(@"-80-443"",
                    ""properties"": {
                      ""redirectType"": ""Permanent"",
                      ""targetListener"": {
                        ""id"": ""[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/httpListeners/fl-");
            
            #line 397 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(webAppUrl));
            
            #line default
            #line hidden
            this.Write(@"-443')]""
                      },
                      ""includePath"": true,
                      ""includeQueryString"": true,
                      ""requestRoutingRules"": [
                        {
                          ""id"": ""[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/requestRoutingRules/rr-");
            
            #line 403 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(webAppUrl));
            
            #line default
            #line hidden
            this.Write("-443\')]\"\r\n                        }\r\n                      ]\r\n                   " +
                    " }\r\n                  }");
            
            #line 407 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comma));
            
            #line default
            #line hidden
            this.Write("\r\n                ");
            
            #line 408 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

            }
          
            
            #line default
            #line hidden
            this.Write("        ],\r\n        \"webApplicationFirewallConfiguration\": {\r\n          \"enabled\"" +
                    ": true,\r\n          \"firewallMode\": \"");
            
            #line 414 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(firewallMode));
            
            #line default
            #line hidden
            this.Write("\",\r\n          \"ruleSetType\": \"OWASP\",\r\n          \"ruleSetVersion\": \"3.1\",\r\n      " +
                    "    \"exclusions\": [],\r\n          \"requestBodyCheck\": true,\r\n          \"maxReques" +
                    "tBodySizeInKb\": 128,\r\n          \"fileUploadLimitInMb\": 100\r\n        },\r\n        " +
                    "\"autoscaleConfiguration\": {\r\n          \"minCapacity\": \"[variables(\'capacity\')]\"," +
                    "\r\n          \"maxCapacity\": \"[variables(\'autoScaleMaxCapacity\')]\"\r\n        }\r\n   " +
                    "   },\r\n      \"resources\": [\r\n        {\r\n          \"type\": \"providers/diagnosticS" +
                    "ettings\",\r\n          \"apiVersion\": \"2017-05-01-preview\",\r\n          \"name\": \"[co" +
                    "ncat(\'Microsoft.Insights/\', variables(\'diagnosticSettingName\'))]\",\r\n          \"d" +
                    "ependsOn\": [\r\n            \"[resourceId(\'Microsoft.Network/applicationGateways\', " +
                    "variables(\'applicationGatewayName\'))]\"\r\n          ],\r\n          \"properties\": {\r" +
                    "\n            \"name\": \"[variables(\'diagnosticSettingName\')]\",\r\n            \"stora" +
                    "geAccountId\": \"[resourceId(variables(\'storageaccountrgname\'), \'Microsoft.Storage" +
                    "/storageAccounts\', variables(\'storageaccountname\'))]\",\r\n            \"logs\": [\r\n " +
                    "             {\r\n                \"category\": \"ApplicationGatewayAccessLog\",\r\n    " +
                    "            \"enabled\": true,\r\n                \"retentionPolicy\": {\r\n            " +
                    "      \"days\": 90,\r\n                  \"enabled\": true\r\n                }\r\n       " +
                    "       },\r\n              {\r\n                \"category\": \"ApplicationGatewayPerfo" +
                    "rmanceLog\",\r\n                \"enabled\": true,\r\n                \"retentionPolicy\"" +
                    ": {\r\n                  \"days\": 90,\r\n                  \"enabled\": true\r\n         " +
                    "       }\r\n              },\r\n              {\r\n                \"category\": \"Applic" +
                    "ationGatewayFirewallLog\",\r\n                \"enabled\": true,\r\n                \"re" +
                    "tentionPolicy\": {\r\n                  \"days\": 90,\r\n                  \"enabled\": t" +
                    "rue\r\n                }\r\n              }\r\n            ],\r\n            \"metrics\": " +
                    "[\r\n              {\r\n                \"category\": \"AllMetrics\",\r\n                \"" +
                    "enabled\": true,\r\n                \"retentionPolicy\": {\r\n                  \"enable" +
                    "d\": true,\r\n                  \"days\": 90\r\n                }\r\n              }\r\n   " +
                    "         ]\r\n          },\r\n          \"condition\": \"[equals(variables(\'enablediagn" +
                    "ostics\'),\'Yes\')]\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"Microsoft.N" +
                    "etwork/publicIPAddresses\",\r\n      \"apiVersion\": \"2019-02-01\",\r\n      \"name\": \"[v" +
                    "ariables(\'appGwPublicIpName\')]\",\r\n      \"location\": \"[variables(\'location\')]\",\r\n" +
                    "      \"tags\": {\r\n        \"Application\": \"");
            
            #line 485 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(application));
            
            #line default
            #line hidden
            this.Write("\",\r\n        \"Owner\": \"");
            
            #line 486 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(owner));
            
            #line default
            #line hidden
            this.Write(@""",
        ""Environment"": ""[variables('tagEnvironment')]""
      },
      ""sku"": {
        ""name"": ""[variables('sku')]""
      },
      ""properties"": {
        ""publicIPAllocationMethod"": ""[variables('allocationMethod')]"",
        ""dnsSettings"": {
          ""domainNameLabel"": ""[variables('dnsnamepip')]""
        }
      }
    },
    {
      ""apiVersion"": ""2017-05-10"",
      ""name"": ""iprestrictions"",
      ""condition"": ""[equals(variables('iprestrictions'),'Yes')]"",
      ""type"": ""Microsoft.Resources/deployments"",
      ""resourceGroup"": ""[variables('teamRg')]"",
      ""dependsOn"": [
        ""[variables('applicationGatewayName')]"",
        ""[variables('appGwPublicIpName')]""
      ],
      ""properties"": {
        ""mode"": ""Incremental"",
        ""template"": {
          ""$schema"": ""http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"",
          ""contentVersion"": ""1.0.0.0"",
          ""parameters"": {},
          ""variables"": {},
          ""resources"": [
          ");
            
            #line 517 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

            for (Int32 ips = 0; ips < stage.BackendAddressPools.Length; ++ips) {
                var setting = stage.BackendAddressPools[ips];
                var comma = (ips == stage.BackendAddressPools.Length - 1) ? "" : ",";
                var backEndName = setting.Value.ToLower().Replace(".azurewebsites.net","");
                
            
            #line default
            #line hidden
            this.Write("{\r\n                    \"type\": \"Microsoft.Web/sites/config\",\r\n                   " +
                    " \"apiVersion\": \"2019-08-01\",\r\n                    \"name\": \"[concat(\'");
            
            #line 525 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(backEndName));
            
            #line default
            #line hidden
            this.Write(@"', '/web')]"",
                    ""dependsOn"": [],
                    ""properties"": {
                    ""ipSecurityRestrictions"": [
                        {
                        ""ipAddress"": ""[concat(reference(variables('publicIPRef')).ipAddress, '/32')]"",
                        ""action"": ""Allow"",
                        ""tag"": ""Default"",
                        ""priority"": 100,
                        ""name"": ""Allow App Gateway Traffic"",
                        ""description"": ""appgateway""
                        },
                        {
                        ""ipAddress"": """);
            
            #line 538 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ipSecurityRestrictions));
            
            #line default
            #line hidden
            this.Write("\",\r\n                        \"action\": \"Allow\",\r\n                        \"tag\": \"D" +
                    "efault\",\r\n                        \"priority\": 101,\r\n                        \"nam" +
                    "e\": \"Allow Internal Traffic Only\",\r\n                        \"description\": \"");
            
            #line 543 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(internalNetworkName));
            
            #line default
            #line hidden
            this.Write("\"\r\n                        }\r\n                    ],\r\n                    \"scmIpS" +
                    "ecurityRestrictions\": [\r\n                        {\r\n                        \"ipA" +
                    "ddress\": \"");
            
            #line 548 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ipSecurityRestrictions));
            
            #line default
            #line hidden
            this.Write("\",\r\n                        \"action\": \"Allow\",\r\n                        \"tag\": \"D" +
                    "efault\",\r\n                        \"priority\": 100,\r\n                        \"nam" +
                    "e\": \"Allow Internal Traffic Only\",\r\n                        \"description\": \"");
            
            #line 553 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(internalNetworkName));
            
            #line default
            #line hidden
            this.Write("\"\r\n                        }\r\n                    ],\r\n                    \"scmIpS" +
                    "ecurityRestrictionsUseMain\": \"false\"\r\n                    }\r\n                }");
            
            #line 558 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comma));
            
            #line default
            #line hidden
            this.Write("\r\n            ");
            
            #line 559 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

            }
          
            
            #line default
            #line hidden
            this.Write("          ]\r\n        },\r\n        \"parameters\": {}\r\n      }\r\n    }\r\n  ]\r\n}\r\n  \r\n\r\n" +
                    "");
            
            #line 571 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

SaveOutputToSubFolder(codeGenPath, $"{data.Id}\\{data.TeamName.ToLower()}-ingress-infra\\ArmTemplate", stageFileName);    
}

            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 576 "C:\research\azure-deploy\CodeTemplates\AGWIngressDeployment.tt"

private void SaveOutputToSubFolder(string rootTemplatePath, string folderName, string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(rootTemplatePath.Replace('\\', Path.DirectorySeparatorChar));
  string newDirectoryName = Path.Combine(templateDirectory,folderName.Replace('\\', Path.DirectorySeparatorChar));
  if(!Directory.Exists(newDirectoryName))
  {  
	Directory.CreateDirectory(newDirectoryName);
  }
  string outputFilePath = Path.Combine(newDirectoryName, outputFileName.Replace('\\', Path.DirectorySeparatorChar));
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}

private readonly string deployment;
private readonly string rootTemplatePath;
public AGWIngressDeployment(string deployment, string rootTemplatePath) {
    this.deployment = deployment;
    this.rootTemplatePath = rootTemplatePath;
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class AGWIngressDeploymentBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
