<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Converters" #>

<#@ output extension=".txt" #>

<#
Deployment data = JsonConvert.DeserializeObject<Deployment>(this.deployment);

var ipSecurityRestrictions = data.IpSecurityRestrictions;
var internalNetworkName = data.InternalNetworkName;
var application = data.TeamDisplayName;
var applicationType = data.ApplicationType;
var owner = data.Owner;
var teamName = data.TeamName;
var appName = data.Name;

var stages = data.WebDeploymentStages;

// DO NOT WIPE THE SOURCE CODE...
var codeGenPath = $"{this.rootTemplatePath}codegen\\";

#>{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Environment": {
        "defaultValue": "",
        "type": "String"
    },
    "Sku" : {
        "defaultValue": "",
        "type": "String"
    },
    "AccessTier": {
        "defaultValue": "",
        "type": "String"
    },
    "DeploymentLocation": {
        "defaultValue": "",
        "type": "String"
    },
    "ContainerName": {
        "defaultValue": "",
        "type": "String"
    }
  },
  "variables": {
    "teamName": "<#=teamName #>",
    "appName": "<#=appName #>",
    "storageAccountName": "[concat(variables('teamName'), parameters('Environment'), parameters('DeploymentLocation'), variables('appName'),'sa')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-07-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [],
      "tags": {
        "Environment": "[parameters('Environment')]",
        "Application": "<#= application #>",
        "Owner": "<#=owner #>"
      },
      "sku": {
        "name": "[parameters('Sku')]"
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "[parameters('AccessTier')]",
        "supportsHttpsTrafficOnly": "true"
      },
      "resources": [
        {
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "condition": "[not(empty(parameters('ContainerName')))]",
          "name": "[concat('default/', parameters('ContainerName'))]",
          "dependsOn": [
            "[variables('storageAccountName')]"
          ]
        }
      ]
    }
  ],
  "outputs": {
    "storageAccountKey": {
      "type": "string",
      "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2018-07-01').keys[0].value]"
    },
    "storageAccountEndpoint": {
      "type": "string",
      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2018-07-01').keys[0].value, ';EndpointSuffix=core.windows.net')]"
    }
  }
}
<#
SaveOutputToSubFolder(codeGenPath, $"{data.Id}\\{data.TeamName.ToLower()}-{data.Name.ToLower()}-infra\\ArmTemplate", "azuredeploy.storageaccount.json");    
#>

<#+
private void SaveOutputToSubFolder(string rootTemplatePath, string folderName, string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(rootTemplatePath.Replace('\\', Path.DirectorySeparatorChar));
  string newDirectoryName = Path.Combine(templateDirectory,folderName.Replace('\\', Path.DirectorySeparatorChar));
  if(!Directory.Exists(newDirectoryName))
  {  
	Directory.CreateDirectory(newDirectoryName);
  }
  string outputFilePath = Path.Combine(newDirectoryName, outputFileName.Replace('\\', Path.DirectorySeparatorChar));
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}

private readonly string deployment;
private readonly string rootTemplatePath;
public StorageAccount(string deployment, string rootTemplatePath) {
    this.deployment = deployment;
    this.rootTemplatePath = rootTemplatePath;
}
#>