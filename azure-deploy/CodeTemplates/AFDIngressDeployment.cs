// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ngCodeGen.CodeTemplates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    using System.IO;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AFDIngressDeployment : AFDIngressDeploymentBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n\r\n");
            this.Write("\r\n");
            
            #line 15 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"

Deployment data = JsonConvert.DeserializeObject<Deployment>(this.deployment);

var ipSecurityRestrictions = data.IpSecurityRestrictions;
var internalNetworkName = data.InternalNetworkName;
var application = data.TeamDisplayName;
var applicationType = data.ApplicationType;
var owner = data.Owner;
var teamName = data.TeamName;

var stages = data.AfdDeploymentStages;

// DO NOT WIPE THE SOURCE CODE...
var codeGenPath = $"{this.rootTemplatePath}codegen\\";

// provision deployment stages   
for (Int32 i = 0; i < stages.Length; ++i) {
	var frontendPort = "80";
    var backendPort = "443";
    var stage = stages[i];
    var suffix = stage.Name;
    var stageFileName = $"azuredeploy.{suffix}.json";

            
            #line default
            #line hidden
            this.Write("{\r\n    \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploym" +
                    "entTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {},\r\n  " +
                    "  \"variables\": {\r\n        \"frontdoors_name\": \"");
            
            #line 42 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(suffix));
            
            #line default
            #line hidden
            this.Write(@"""
    },
    ""resources"": [
        {
            ""type"": ""Microsoft.Network/frontdoors"",
            ""apiVersion"": ""2020-05-01"",
            ""name"": ""[variables('frontdoors_name')]"",
            ""location"": ""Global"",
            ""tags"": {
              ""Environment"": """);
            
            #line 51 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(suffix));
            
            #line default
            #line hidden
            this.Write("\",\r\n              \"Application\": \"");
            
            #line 52 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(application));
            
            #line default
            #line hidden
            this.Write("\",\r\n              \"Owner\": \"");
            
            #line 53 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(owner));
            
            #line default
            #line hidden
            this.Write("\"\r\n            },\r\n            \"properties\": {\r\n                \"resourceState\": " +
                    "\"Enabled\",\r\n                \"backendPools\": [\r\n                ");
            
            #line 58 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
 
                    int ipsb = 0;    
                    foreach (var step in stage.AfdDeploymentSteps)
                    {
                        var grComma = (stage.AfdDeploymentSteps.Length == ipsb) ? "" : ",";
                        ipsb++;
                        
                        var cookieBasedAffinity = step.CookieBasedAffinity;
                        var affinityCookieName = step.AffinityCookieName;
                        var firewallMode = step.FirewallMode;
                        var groups = step.BackendAddressPools.GroupBy(s => s.Type);
                        foreach (var groupBy in groups)
                        {
                          var env = groupBy.Key.Replace(".","-");
                          
            
            #line default
            #line hidden
            this.Write("{\r\n                            \"id\": \"[concat(resourceId(\'Microsoft.Network/front" +
                    "doors\', variables(\'frontdoors_name\')), concat(\'/BackendPools/\', variables(\'front" +
                    "doors_name\'), \'-backends-");
            
            #line 73 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(env));
            
            #line default
            #line hidden
            this.Write("\'))]\",\r\n                            \"name\": \"[concat(variables(\'frontdoors_name\')" +
                    ", \'-backends-\', \'");
            
            #line 74 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(env));
            
            #line default
            #line hidden
            this.Write("\')]\",\r\n                            \"properties\": {\r\n                             " +
                    "   \"backends\": [\r\n                                ");
            
            #line 77 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"

                                int ipse = 0;
                                foreach (var group in groupBy) {
                                    var count = groupBy.Count();
                                    var comma = (ipse == count - 1) ? "" : ",";
                                    ipse++;
                                    var azureWebUrl = group.Value;
                                    var backEndName = group.Type;
                                    
            
            #line default
            #line hidden
            this.Write("                                    {\r\n                                        \"a" +
                    "ddress\": \"");
            
            #line 87 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(azureWebUrl));
            
            #line default
            #line hidden
            this.Write("\",\r\n                                        \"httpPort\": ");
            
            #line 88 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(frontendPort));
            
            #line default
            #line hidden
            this.Write(",\r\n                                        \"httpsPort\": ");
            
            #line 89 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(backendPort));
            
            #line default
            #line hidden
            this.Write(",\r\n                                        \"priority\": 1,\r\n                      " +
                    "                  \"weight\": ");
            
            #line 91 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(100/count));
            
            #line default
            #line hidden
            this.Write(",\r\n                                        \"backendHostHeader\": \"");
            
            #line 92 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(backEndName));
            
            #line default
            #line hidden
            this.Write("\",\r\n                                        \"enabledState\": \"Enabled\"\r\n          " +
                    "                          }");
            
            #line 94 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comma));
            
            #line default
            #line hidden
            this.Write("\r\n                                ");
            
            #line 95 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write(@"                                ],
                                ""healthProbeSettings"": {
                                    ""id"": ""[concat(resourceId('Microsoft.Network/frontdoors', variables('frontdoors_name')), '/healthprobesettings/healthprobesettings-");
            
            #line 98 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(env));
            
            #line default
            #line hidden
            this.Write(@"')]""
                                },
                                ""loadBalancingSettings"": {
                                    ""id"": ""[concat(resourceId('Microsoft.Network/frontdoors', variables('frontdoors_name')), '/loadbalancingsettings/loadbalancingsettings-");
            
            #line 101 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(env));
            
            #line default
            #line hidden
            this.Write("\')]\"\r\n                                },\r\n                                \"resour" +
                    "ceState\": \"Enabled\"\r\n                            }\r\n                        }");
            
            #line 105 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(grComma));
            
            #line default
            #line hidden
            this.Write("      \r\n                    ");
            
            #line 106 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
}}
            
            #line default
            #line hidden
            this.Write("                ],\r\n                \"healthProbeSettings\": [\r\n                ");
            
            #line 109 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
 
                int ipsProbe = 0;
                foreach (var step in stage.AfdDeploymentSteps)
                {
                    var grComma = (stage.AfdDeploymentSteps.Length == ipsProbe) ? "" : ",";
                    var groupsProbe = step.BackendAddressPools.GroupBy(s => s.Type);
                    ipsProbe++;
                    
                    foreach (var groupBy in groupsProbe)
                    {
                        var env = groupBy.Key.Replace(".","-");
                        
            
            #line default
            #line hidden
            this.Write("{\r\n                            \"id\": \"[concat(resourceId(\'Microsoft.Network/front" +
                    "doors\', variables(\'frontdoors_name\')), \'/HealthProbeSettings/healthprobesettings" +
                    "-");
            
            #line 121 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(env));
            
            #line default
            #line hidden
            this.Write("\')]\",\r\n                            \"name\": \"healthprobesettings-");
            
            #line 122 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(env));
            
            #line default
            #line hidden
            this.Write(@""",
                            ""properties"": {
                                ""intervalInSeconds"": 30,
                                ""path"": ""/"",
                                ""protocol"": ""Https"",
                                ""resourceState"": ""Enabled"",
                                ""enabledState"": ""Enabled"",
                                ""healthProbeMethod"": ""Head""
                            }
                        }");
            
            #line 131 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(grComma));
            
            #line default
            #line hidden
            this.Write("      \r\n                ");
            
            #line 132 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
}}
            
            #line default
            #line hidden
            this.Write(@"                ],
                ""frontendEndpoints"": [
                    {
                        ""id"": ""[concat(resourceId('Microsoft.Network/frontdoors', variables('frontdoors_name')), concat('/FrontendEndpoints/', variables('frontdoors_name'), '-azurefd-net'))]"",
                        ""name"": ""[concat(variables('frontdoors_name'), '-azurefd-net')]"",
                        ""properties"": {
                            ""hostName"": ""[concat(variables('frontdoors_name'), '.azurefd.net')]"",
                            ""sessionAffinityEnabledState"": ""Disabled"",
                            ""sessionAffinityTtlSeconds"": 0,
                            ""resourceState"": ""Enabled""
                        }
                    },
                    ");
            
            #line 145 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
 
                    var ipsFE = 0;
                    foreach (var step in stage.AfdDeploymentSteps)
                    {
                        var grComma = (stage.AfdDeploymentSteps.Length == ipsFE) ? "" : ",";    
                        var groupsFE = step.BackendAddressPools.GroupBy(s => s.Type);
                        ipsFE++;
                        
                        foreach (var groupBy in groupsFE)
                        {
                            var hostName = groupBy.Key;
                            var env = groupBy.Key.Replace(".","-");
                            var feData = groupBy.First();
                            var certKeyVaultName = feData.CertKeyVaultName;
                            var certKeyVaultSecret = feData.CertKeyVaultSecret;
                            var certKeyVaultVersion = feData.CertKeyVaultVersion;
                            var certKeyVaultResourceGroupName = feData.CertKeyVaultResourceGroupName;
                            var sessionAffinityState = feData.SessionAffinityState;
                            var existingFrontend = feData.ExistingFrontend;

                            if (string.IsNullOrEmpty(existingFrontend)) {
                            
            
            #line default
            #line hidden
            this.Write("{\r\n                                \"id\": \"[concat(resourceId(\'Microsoft.Network/f" +
                    "rontdoors\', variables(\'frontdoors_name\')), \'/FrontendEndpoints/");
            
            #line 167 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(env));
            
            #line default
            #line hidden
            this.Write("\')]\",\r\n                                \"name\": \"");
            
            #line 168 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(env));
            
            #line default
            #line hidden
            this.Write("\",\r\n                                \"properties\": {\r\n                            " +
                    "        \"hostName\": \"");
            
            #line 170 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hostName));
            
            #line default
            #line hidden
            this.Write("\",\r\n                                    \"sessionAffinityEnabledState\": \"");
            
            #line 171 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sessionAffinityState));
            
            #line default
            #line hidden
            this.Write(@""",
                                    ""sessionAffinityTtlSeconds"": 0,
                                    ""resourceState"": ""Enabled"",
                                    ""customHttpsConfiguration"": {
                                        ""certificateSource"": ""AzureKeyVault"",        
                                        ""minimumTlsVersion"":""1.2"",
                                        ""protocolType"": ""ServerNameIndication"",
                                        ""keyVaultCertificateSourceParameters"": {
                                          ""secretName"": """);
            
            #line 179 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(certKeyVaultSecret));
            
            #line default
            #line hidden
            this.Write("\",\r\n                                          \"secretVersion\": \"");
            
            #line 180 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(certKeyVaultVersion));
            
            #line default
            #line hidden
            this.Write("\",\r\n                                          \"vault\": {\r\n                       " +
                    "                     \"id\": \"[resourceId(\'");
            
            #line 182 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(certKeyVaultResourceGroupName));
            
            #line default
            #line hidden
            this.Write("\',\'Microsoft.KeyVault/vaults\', \'");
            
            #line 182 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(certKeyVaultName));
            
            #line default
            #line hidden
            this.Write("\')]\"\r\n                                          }\r\n                              " +
                    "          }\r\n                                    }\r\n                            " +
                    "    }\r\n                            }");
            
            #line 187 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(grComma));
            
            #line default
            #line hidden
            this.Write("      \r\n                    ");
            
            #line 188 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
}}}
            
            #line default
            #line hidden
            this.Write("                ],\r\n                \"loadBalancingSettings\": [\r\n                 " +
                    "   ");
            
            #line 191 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
 
                    var ipsLB = 0;
                        
                    foreach (var step in stage.AfdDeploymentSteps)
                    {
                        var grComma = (stage.AfdDeploymentSteps.Length == ipsLB) ? "" : ",";  
                        var groupsLB = step.BackendAddressPools.GroupBy(s => s.Type);
                        ipsLB++;
                        
                        foreach (var groupBy in groupsLB)
                        {
                            
                            var env = groupBy.Key.Replace(".","-");
                            
            
            #line default
            #line hidden
            this.Write("{\r\n                            \"id\": \"[concat(resourceId(\'Microsoft.Network/front" +
                    "doors\', variables(\'frontdoors_name\')), \'/LoadBalancingSettings/loadBalancingSett" +
                    "ings-");
            
            #line 205 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(env));
            
            #line default
            #line hidden
            this.Write("\')]\",\r\n                            \"name\": \"loadBalancingSettings-");
            
            #line 206 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(env));
            
            #line default
            #line hidden
            this.Write(@""",
                            ""properties"": {
                                ""additionalLatencyMilliseconds"": 1000,
                                ""sampleSize"": 1,
                                ""successfulSamplesRequired"": 1,
                                ""resourceState"": ""Enabled""
                            }
                        }");
            
            #line 213 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(grComma));
            
            #line default
            #line hidden
            this.Write("      \r\n                    ");
            
            #line 214 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
}}
            
            #line default
            #line hidden
            this.Write("                ],\r\n                \"routingRules\": [\r\n                    ");
            
            #line 217 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"

                    var ips = 0;
                        
                    foreach (var step in stage.AfdDeploymentSteps)
                    {
                        var grComma = (stage.AfdDeploymentSteps.Length == ips) ? "" : ",";  
                        ips++;
                        
                        var groupsRR = step.BackendAddressPools.GroupBy(s => s.Type);
                        foreach (var groupBy in groupsRR)
                        {
                            var env = groupBy.Key.Replace(".","-");
                            var feData = groupBy.First();
                            var fePoint = (string.IsNullOrEmpty(feData.ExistingFrontend)) ? env : feData.ExistingFrontend.Replace(".","-");
                            var patternsToMatch = feData.PatternsToMatch;
                            
            
            #line default
            #line hidden
            this.Write("{\r\n                            \"id\": \"[concat(resourceId(\'Microsoft.Network/front" +
                    "doors\', variables(\'frontdoors_name\')), \'/RoutingRules/");
            
            #line 233 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(env));
            
            #line default
            #line hidden
            this.Write("-rule\')]\",\r\n                            \"name\": \"");
            
            #line 234 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(env));
            
            #line default
            #line hidden
            this.Write(@"-rule"",
                            ""properties"": {
                                ""frontendEndpoints"": [
                                    {
                                        ""id"": ""[concat(resourceId('Microsoft.Network/frontdoors', variables('frontdoors_name')), '/frontendendpoints/");
            
            #line 238 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fePoint));
            
            #line default
            #line hidden
            this.Write(@"')]""
                                    }
                                ],
                                ""acceptedProtocols"": [
                                    ""Http"",
                                    ""Https""
                                ],
                                ""patternsToMatch"": [
                                    """);
            
            #line 246 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(patternsToMatch));
            
            #line default
            #line hidden
            this.Write(@"""
                                ],
                                ""enabledState"": ""Enabled"",
                                ""resourceState"": ""Enabled"",
                                ""routeConfiguration"": {
                                    ""@odata.type"": ""#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration"",
                                    ""forwardingProtocol"": ""HttpsOnly"",
                                    ""backendPool"": {
                                        ""id"": ""[concat(resourceId('Microsoft.Network/frontdoors', variables('frontdoors_name')), concat('/BackendPools/', variables('frontdoors_name'), '-backends-");
            
            #line 254 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(env));
            
            #line default
            #line hidden
            this.Write("\'))]\"\r\n                                    }\r\n                                }\r\n" +
                    "                            }\r\n                        }");
            
            #line 258 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(grComma));
            
            #line default
            #line hidden
            this.Write("      \r\n                    ");
            
            #line 259 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"
}}
            
            #line default
            #line hidden
            this.Write(@"                ],
                ""backendPoolsSettings"": {
                    ""enforceCertificateNameCheck"": ""Enabled"",
                    ""sendRecvTimeoutSeconds"": 30
                },
                ""enabledState"": ""Enabled"",
                ""friendlyName"": ""[variables('frontdoors_name')]""
            }
        }
    ]
}
");
            
            #line 271 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"

SaveOutputToSubFolder(codeGenPath, $"{data.Id}\\{data.TeamName.ToLower()}-ingress-infra\\ArmTemplate", stageFileName);    
}

            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 276 "C:\research\azure-deploy\CodeTemplates\AFDIngressDeployment.tt"

private void SaveOutputToSubFolder(string rootTemplatePath, string folderName, string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(rootTemplatePath.Replace('\\', Path.DirectorySeparatorChar));
  string newDirectoryName = Path.Combine(templateDirectory,folderName.Replace('\\', Path.DirectorySeparatorChar));
  if(!Directory.Exists(newDirectoryName))
  {  
	Directory.CreateDirectory(newDirectoryName);
  }
  string outputFilePath = Path.Combine(newDirectoryName, outputFileName.Replace('\\', Path.DirectorySeparatorChar));
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}

private readonly string deployment;
private readonly string rootTemplatePath;
public AFDIngressDeployment(string deployment, string rootTemplatePath) {
    this.deployment = deployment;
    this.rootTemplatePath = rootTemplatePath;
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class AFDIngressDeploymentBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
