// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ngCodeGen.CodeTemplates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    using System.IO;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class TrafficManagerDeployment : TrafficManagerDeploymentBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            
            #line 14 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"

Deployment data = JsonConvert.DeserializeObject<Deployment>(this.deployment);

var ipSecurityRestrictions = data.IpSecurityRestrictions;
var internalNetworkName = data.InternalNetworkName;
var appName = data.ApplicationName;
var teamName = data.TeamName;
var applicationType = data.ApplicationType;
var owner = data.Owner;
var resourceGroupConfigKVSuffix = data.ResourceGroupConfigKVSuffix;
var stages = data.TmDeploymentStages;

// DO NOT WIPE THE SOURCE CODE...
var codeGenPath = $"{this.rootTemplatePath}codegen\\";

// provision deployment stages   
for (Int32 i = 0; i < stages.Length; ++i) {
	var stage = stages[i];
    var stageFileName = $"azuredeploy.trafficmanager.{stage.Name}.json";
    var subscriptionId = stage.SubscriptionId;
    var outagewebappurl = stage.Outagewebappurl;
    var environment = stage.Environment;
    var trafficManagerName = stage.TrafficManagerName;
    var trafficRoutingMethod = stage.TrafficRoutingMethod;
    var trafficViewEnrollment_Status = stage.TrafficViewEnrollmentStatus??"Enabled";

            
            #line default
            #line hidden
            this.Write("{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymen" +
                    "tTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {},\r\n  \"varia" +
                    "bles\": {\r\n    \"trafficManager_name\": \"");
            
            #line 45 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trafficManagerName));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"location\": \"Global\",\r\n    \"trafficRoutingMethod\": \"");
            
            #line 47 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trafficRoutingMethod));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"outagewebappurl\": \"");
            
            #line 48 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(outagewebappurl));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"TagEnvironment\": \"");
            
            #line 49 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(environment));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"trafficViewEnrollment_Status\": \"");
            
            #line 50 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(trafficViewEnrollment_Status));
            
            #line default
            #line hidden
            this.Write("\"\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"type\": \"Microsoft.Network/trafficManager" +
                    "Profiles\",\r\n      \"apiVersion\": \"2018-04-01\",\r\n      \"name\": \"[variables(\'traffi" +
                    "cManager_name\')]\",\r\n      \"location\": \"global\",\r\n      \"tags\": {\r\n        \"Appli" +
                    "cation\": \"");
            
            #line 59 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(appName));
            
            #line default
            #line hidden
            this.Write("\",\r\n        \"Owner\": \"");
            
            #line 60 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(owner));
            
            #line default
            #line hidden
            this.Write("\",\r\n        \"Environment\": \"[variables(\'TagEnvironment\')]\"\r\n      },\r\n      \"prop" +
                    "erties\": {\r\n        \"profileStatus\": \"Enabled\",\r\n        \"trafficRoutingMethod\":" +
                    " \"[variables(\'trafficRoutingMethod\')]\",\r\n        \"dnsConfig\": {\r\n          \"rela" +
                    "tiveName\": \"[variables(\'trafficManager_name\')]\",\r\n          \"ttl\": 5\r\n        }," +
                    "\r\n        \"monitorConfig\": {\r\n          \"profileMonitorStatus\": \"Online\",\r\n     " +
                    "     \"protocol\": \"HTTPS\",\r\n          \"port\": 443,\r\n          \"path\": \"/\",\r\n     " +
                    "     \"intervalInSeconds\": 30,\r\n          \"toleratedNumberOfFailures\": 3,\r\n      " +
                    "    \"timeoutInSeconds\": 10\r\n          ],\r\n          \"expectedStatusCodeRanges\": " +
                    "[\r\n            {\r\n              \"min\": 200,\r\n              \"max\": 399\r\n         " +
                    "   }\r\n          ]\r\n        },\r\n        \"endpoints\": [\r\n         {\r\n            \"" +
                    "id\": \"[concat(resourceId(\'Microsoft.Network/trafficManagerProfiles\', variables(\'" +
                    "trafficManager_name\')), \'/externalEndpoints/outage-endpoint\')]\",\r\n            \"n" +
                    "ame\": \"outage-endpoint\",\r\n            \"type\": \"Microsoft.Network/trafficManagerP" +
                    "rofiles/externalEndpoints\",\r\n            \"properties\": {\r\n                \"endpo" +
                    "intStatus\": \"Enabled\",\r\n                \"endpointMonitorStatus\": \"Online\",\r\n    " +
                    "            \"target\": \"[variables(\'outagewebappurl\')]\",\r\n                \"weight" +
                    "\": 1,\r\n                \"priority\": 20,\r\n                \"customHeaders\": [\r\n    " +
                    "            {\r\n                    \"name\": \"host\",\r\n                    \"value\":" +
                    " \"[variables(\'outagewebappurl\')]\"\r\n                }\r\n                ],\r\n      " +
                    "          \"subnets\": []\r\n            }\r\n          },\r\n          ");
            
            #line 106 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
 
            int ipsProbe = 0;
            foreach (var step in stage.TmPools)
            {
                var grComma = (stage.TmPools.Length == ipsProbe) ? "" : ",";
                ipsProbe++;          
                var isAgw = true;
                var appgateway_url = step.AppgatewayUrl;
                var webAppName = step.WebAppName;
                var rgName = step.WebAppRgName;
                var location = step.EndpointLocation;
                var tmName = (string.IsNullOrEmpty(webAppName)) ? $"agw-{ipsProbe}" : webAppName;
          
            
            #line default
            #line hidden
            this.Write("{\r\n            ");
            
            #line 119 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
 if (isAgw) {
            
            #line default
            #line hidden
            this.Write("            \"id\": \"[concat(resourceId(\'Microsoft.Network/trafficManagerProfiles\'," +
                    " variables(\'trafficManager_name\')), \'/externalEndpoints/");
            
            #line 120 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(teamName));
            
            #line default
            #line hidden
            this.Write("-agw-backend");
            
            #line 120 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ipsProbe));
            
            #line default
            #line hidden
            this.Write("\')]\",\r\n            \"type\": \"Microsoft.Network/trafficManagerProfiles/externalEndp" +
                    "oints\",\r\n            ");
            
            #line 122 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
} else {
            
            #line default
            #line hidden
            this.Write("            \"id\": \"[concat(resourceId(\'Microsoft.Network/trafficManagerProfiles\'," +
                    " variables(\'trafficManager_name\')), \'/azureEndpoints/");
            
            #line 123 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tmName));
            
            #line default
            #line hidden
            this.Write("\')]\",\r\n            \"type\": \"Microsoft.Network/trafficManagerProfiles/azureEndpoin" +
                    "ts\",\r\n            ");
            
            #line 125 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write("            \"name\": \"");
            
            #line 126 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tmName));
            
            #line default
            #line hidden
            this.Write("\",\r\n            \"properties\": {\r\n              \"endpointStatus\": \"Enabled\",\r\n    " +
                    "          \"endpointMonitorStatus\": \"Online\",\r\n               ");
            
            #line 130 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
 if (isAgw) {
            
            #line default
            #line hidden
            this.Write("              \"target\": \"");
            
            #line 131 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(appgateway_url));
            
            #line default
            #line hidden
            this.Write("\",\r\n               ");
            
            #line 132 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
} else {
            
            #line default
            #line hidden
            this.Write("               \"target\": \"");
            
            #line 133 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(webAppName));
            
            #line default
            #line hidden
            this.Write(".azurewebsites.net\",\r\n               \"targetResourceId\": \"/subscriptions/");
            
            #line 134 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(subscriptionId));
            
            #line default
            #line hidden
            this.Write("/resourceGroups/");
            
            #line 134 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rgName));
            
            #line default
            #line hidden
            this.Write("/providers/Microsoft.Web/sites/");
            
            #line 134 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(webAppName));
            
            #line default
            #line hidden
            this.Write("\",\r\n               ");
            
            #line 135 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write("              \"weight\": 1,\r\n              \"priority\": 10,\r\n              \"endpoin" +
                    "tLocation\": \"");
            
            #line 138 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(location));
            
            #line default
            #line hidden
            this.Write("\",\r\n              \"customHeaders\": [\r\n                ");
            
            #line 140 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"

                for (Int32 ips = 0; ips < step.WebAppHosts.Length; ++ips) {
                    var webHost = step.WebAppHosts[ips];
                    var comma = (ips == step.WebAppHosts.Length - 1) ? "" : ",";
                    
            
            #line default
            #line hidden
            this.Write("{\r\n                         \"name\": \"host\",\r\n                         \"value\": \"");
            
            #line 146 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(webHost));
            
            #line default
            #line hidden
            this.Write("\"\r\n                      }");
            
            #line 147 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(comma));
            
            #line default
            #line hidden
            this.Write("\r\n                    ");
            
            #line 148 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"

                }
              
            
            #line default
            #line hidden
            this.Write("              ],\r\n              \"subnets\": []\r\n            }\r\n          }");
            
            #line 154 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(grComma));
            
            #line default
            #line hidden
            this.Write("      \r\n        ");
            
            #line 155 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"
}
            
            #line default
            #line hidden
            this.Write("        ],\r\n        \"trafficViewEnrollmentStatus\": \"Enabled\"\r\n      }\r\n    }\r\n  ]" +
                    "\r\n}\r\n\r\n");
            
            #line 163 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"

SaveOutputToSubFolder(codeGenPath, $"{data.Id}\\{data.TeamName.ToLower()}-ingress-infra\\ArmTemplate", stageFileName);    
}

            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 168 "C:\research\azure-deploy\CodeTemplates\TrafficManagerDeployment.tt"

private void SaveOutputToSubFolder(string rootTemplatePath, string folderName, string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(rootTemplatePath.Replace('\\', Path.DirectorySeparatorChar));
  string newDirectoryName = Path.Combine(templateDirectory,folderName.Replace('\\', Path.DirectorySeparatorChar));
  if(!Directory.Exists(newDirectoryName))
  {  
	Directory.CreateDirectory(newDirectoryName);
  }
  string outputFilePath = Path.Combine(newDirectoryName, outputFileName.Replace('\\', Path.DirectorySeparatorChar));
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}

private readonly string deployment;
private readonly string rootTemplatePath;
public TrafficManagerDeployment(string deployment, string rootTemplatePath) {
    this.deployment = deployment;
    this.rootTemplatePath = rootTemplatePath;
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class TrafficManagerDeploymentBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
