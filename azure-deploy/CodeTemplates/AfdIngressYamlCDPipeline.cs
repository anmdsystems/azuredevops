// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ngCodeGen.CodeTemplates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    using System.IO;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AfdIngressYamlCDPipeline : AfdIngressYamlCDPipelineBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            
            #line 14 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"

Deployment data = JsonConvert.DeserializeObject<Deployment>(this.deployment);

var stages = data.AfdDeploymentStages;
var defaultLocation = data.DefaultLocation;
var poolName = data.PoolName;
var vmImage = string.IsNullOrEmpty(data.VmImage) ? "" : $"vmimage: {data.VmImage}";

// DO NOT WIPE THE SOURCE CODE...
var codeGenPath = $"{this.rootTemplatePath}codegen\\";

// TEMPLATE CODE HERE

            
            #line default
            #line hidden
            this.Write("name: $(BuildID)\r\npool: \r\n  name: ");
            
            #line 29 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(poolName));
            
            #line default
            #line hidden
            this.Write("\r\n  ");
            
            #line 30 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vmImage));
            
            #line default
            #line hidden
            this.Write("\r\ntrigger:\r\n- develop\r\n- releases/*\r\n- master\r\n\r\nstages:\r\n");
            
            #line 37 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"

// provision deployment stages   
for (Int32 j = 0; j < stages.Length; ++j) {
 var stage = stages[j];
 var suffix = stage.Name;
 var deploymentLocation = stage.DeploymentLocationName;

 foreach (var step in stage.AfdDeploymentSteps) {
    var subscriptionId = step.SubscriptionId;
    var azureServiceConnectionName = step.AzureServiceConnectionName;
    var resourceGroup = step.Webapprg;
    var environment = step.Environment;
    var buildSourceBranch = step.BuildSourceBranch;
    var customCondition = "eq(variables['Build.SourceBranch'], '')";
    
    var groupsFE = step.BackendAddressPools.GroupBy(s => s.Type);
    foreach (var groupBy in groupsFE)
    {
        var feData = groupBy.First();
        var certKeyVaultName = feData.CertKeyVaultName;
        var certKeyVaultSecret = feData.CertKeyVaultSecret;
        var certKeyVaultVersion = feData.CertKeyVaultVersion;
        var hostName = groupBy.Key;
        var fdendpoint = groupBy.Key.Replace(".","-");

    if (environment.ToLower() == "int") {
        customCondition = "eq(variables['Build.SourceBranch'], 'refs/heads/develop')";
    
            
            #line default
            #line hidden
            this.Write("  - stage: VALIDATE\r\n    jobs:\r\n    - deployment: Validation\r\n      displayName: " +
                    "Validate Template\r\n      environment: ");
            
            #line 68 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(environment.ToLower()));
            
            #line default
            #line hidden
            this.Write(@"     

    - job: VALIDATE
      condition: and(succeeded(), and(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Deploy'], 'true')))
      steps:
      - task: AzureResourceGroupDeployment@2
        displayName: 'Validate Template'
        inputs:
          azureSubscription: '");
            
            #line 76 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(azureServiceConnectionName));
            
            #line default
            #line hidden
            this.Write("\'\r\n          resourceGroupName: \'");
            
            #line 77 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resourceGroup));
            
            #line default
            #line hidden
            this.Write("\'\r\n          location: \'");
            
            #line 78 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(deploymentLocation));
            
            #line default
            #line hidden
            this.Write("\'\r\n          csmFile: ArmTemplate/azuredeploy.");
            
            #line 79 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(suffix));
            
            #line default
            #line hidden
            this.Write(".json\r\n          deploymentMode: Validation\r\n    ");
            
            #line 81 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"

    }
    else if (environment.ToLower() == "qa" || environment.ToLower() == "test") {
        customCondition = "startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/')";
    }
    else if (environment.ToLower() == "can") {
        customCondition = "or(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))";
    }
    else if (environment.ToLower() == "prod") {
        customCondition = "eq(variables['Build.SourceBranch'], 'refs/heads/master')";
    } else {
        customCondition = $"eq(variables['Build.SourceBranch'], {buildSourceBranch})";
    }
    
            
            #line default
            #line hidden
            this.Write("  - stage: ");
            
            #line 95 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stage.Name.ToUpper().Replace("-","_").Replace(".","_")));
            
            #line default
            #line hidden
            this.Write("\r\n    condition: ");
            
            #line 96 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customCondition));
            
            #line default
            #line hidden
            this.Write("\r\n    jobs:\r\n    - deployment: ");
            
            #line 98 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(environment));
            
            #line default
            #line hidden
            this.Write("Deployment \r\n      displayName: Deploy Template To ");
            
            #line 99 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(environment.ToLower()));
            
            #line default
            #line hidden
            this.Write(" \r\n      environment: ");
            
            #line 100 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(environment.ToLower()));
            
            #line default
            #line hidden
            this.Write("  \r\n\r\n    - job: deploy");
            
            #line 102 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(environment.ToLower()));
            
            #line default
            #line hidden
            this.Write("  \r\n      condition: and(succeeded(), ");
            
            #line 103 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customCondition));
            
            #line default
            #line hidden
            this.Write(")\r\n      steps:\r\n      - task: AzureResourceManagerTemplateDeployment@3\r\n        " +
                    "displayName: \'ARM Template deployment: Resource Group scope\'\r\n        inputs:\r\n " +
                    "         azureResourceManagerConnection: \'");
            
            #line 108 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(azureServiceConnectionName));
            
            #line default
            #line hidden
            this.Write("\'\r\n          subscriptionId: \'");
            
            #line 109 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(subscriptionId));
            
            #line default
            #line hidden
            this.Write("\'\r\n          resourceGroupName: \'");
            
            #line 110 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resourceGroup));
            
            #line default
            #line hidden
            this.Write("\'\r\n          location: \'");
            
            #line 111 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(deploymentLocation));
            
            #line default
            #line hidden
            this.Write("\'\r\n          templateLocation: \'Linked artifact\'\r\n          csmFile: ArmTemplate/" +
                    "azuredeploy.");
            
            #line 113 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(suffix));
            
            #line default
            #line hidden
            this.Write(".json\r\n          deploymentMode: Incremental\r\n\r\n    - job: deploySSLCert");
            
            #line 116 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(environment.ToLower()));
            
            #line default
            #line hidden
            this.Write("  \r\n      condition: and(succeeded(), ");
            
            #line 117 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customCondition));
            
            #line default
            #line hidden
            this.Write(")\r\n      steps:\r\n      - task: AzurePowerShell@5\r\n        displayName: \'Azure Pow" +
                    "erShell script: InlineScript\'\r\n        inputs:\r\n          azureSubscription: \'");
            
            #line 122 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(azureServiceConnectionName));
            
            #line default
            #line hidden
            this.Write("\'\r\n          ScriptType: InlineScript\r\n          Inline: |\r\n            $vaultNam" +
                    "e = \"");
            
            #line 125 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(certKeyVaultName));
            
            #line default
            #line hidden
            this.Write("\"\r\n            $secretName  = \"");
            
            #line 126 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(certKeyVaultSecret));
            
            #line default
            #line hidden
            this.Write("\"\r\n            $secretVersion  = \"");
            
            #line 127 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(certKeyVaultVersion));
            
            #line default
            #line hidden
            this.Write("\"\r\n            $vaultId = (Get-AzKeyVault -VaultName $vaultName).ResourceId\r\n    " +
                    "        Enable-AzFrontDoorCustomDomainHttps -ResourceGroupName \"");
            
            #line 129 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resourceGroup));
            
            #line default
            #line hidden
            this.Write("\" -FrontDoorName \"");
            
            #line 129 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(suffix));
            
            #line default
            #line hidden
            this.Write("\" -FrontendEndpointName \"");
            
            #line 129 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fdendpoint));
            
            #line default
            #line hidden
            this.Write("\" -Vault $vaultId -secretName $secretName -SecretVersion $secretVersion -MinimumT" +
                    "lsVersion \"1.2\"\r\n          azurePowerShellVersion: LatestVersion\r\n\r\n    ");
            
            #line 132 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"

    // END TEMPLATE CODE
}}}

SaveOutputToSubFolder(codeGenPath, $"{data.Id}\\{data.TeamName.ToLower()}-ingress-infra\\CD", "azure-pipelines.yml");    

            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 139 "C:\research\azure-deploy\CodeTemplates\AfdIngressYamlCDPipeline.tt"

private void SaveOutputToSubFolder(string rootTemplatePath, string folderName, string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(rootTemplatePath.Replace('\\', Path.DirectorySeparatorChar));
  string newDirectoryName = Path.Combine(templateDirectory,folderName.Replace('\\', Path.DirectorySeparatorChar));
  if(!Directory.Exists(newDirectoryName))
  {  
	Directory.CreateDirectory(newDirectoryName);
  }
  string outputFilePath = Path.Combine(newDirectoryName, outputFileName.Replace('\\', Path.DirectorySeparatorChar));
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}

private readonly string deployment;
private readonly string rootTemplatePath;
public AfdIngressYamlCDPipeline(string deployment, string rootTemplatePath) {
    this.deployment = deployment;
    this.rootTemplatePath = rootTemplatePath;
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class AfdIngressYamlCDPipelineBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
