// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ngCodeGen.CodeTemplates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    using System.IO;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ServicePlan : ServicePlanBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            
            #line 14 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"

Deployment data = JsonConvert.DeserializeObject<Deployment>(this.deployment);

var teamName = data.TeamName;
var appName = data.Name;
var application = data.ApplicationName;
var appId = data.Id;
var useVnetIntegration = data.UseVnetIntegration;
var isLinux = data.IsLinux;
var hasActionAlerts = data.HasActionAlerts;
var applicationType = data.ApplicationType;
var owner = data.Owner;
var multiRegion = (data.IsMultiRegion) ? "[concat('-', parameters('DeploymentLocation'))]" : "";
var ipSecurityRestrictions = data.IpSecurityRestrictions;
var internalNetworkName = data.InternalNetworkName;
var resourceGroupConfigKVSuffix = data.ResourceGroupConfigKVSuffix;
var useDbaVault = data.UseDbaVault;
var dotnetcore = data.IsDotNetCore;
var customDns = data.IsCustomDns;
var hasSlots = data.HasSlots;
var useIndependentPlan = data.UseIndependentPlan;
var kind = data.Kind ?? "app";
var islinux = data.IsLinux;
var isContainer = data.IsContainer;
var dotnetstartupdll = data.StartupCommand ?? "";
var dotnetversion = data.Dotnetversion ?? "";
var appServicePlanAutoScaleEmailNotificationContacts = JsonConvert.SerializeObject(data.AppServicePlanAutoScaleEmailNotificationContacts);
var hasCustomCertificate = data.IsCustomDns;

// DO NOT WIPE THE SOURCE CODE...
var codeGenPath = $"{this.rootTemplatePath}codegen\\";

// TEMPLATE CODE HERE

            
            #line default
            #line hidden
            this.Write("{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymen" +
                    "tTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"Envir" +
                    "onment\": {\r\n      \"type\": \"string\",\r\n      \"metadata\": {\r\n        \"description\":" +
                    " \"The environment type to be deployed. This is used when naming resources.\"\r\n   " +
                    "   }\r\n    },\r\n    \"AppServicePlanSku\": {\r\n      \"type\": \"string\",\r\n      \"metada" +
                    "ta\": {\r\n        \"description\": \"The SKU to be used for the app service plan.\"\r\n " +
                    "     }\r\n    },\r\n    \"AppServicePlanTier\": {\r\n      \"type\": \"string\",\r\n      \"met" +
                    "adata\": {\r\n        \"description\": \"The tier to be used for the app service plan." +
                    "\"\r\n      }\r\n    },\r\n    \"AppServicePlanInstanceCount\": {\r\n      \"type\": \"int\",\r\n" +
                    "      \"metadata\": {\r\n        \"description\": \"The number of instances to run with" +
                    "in the app service plan.\"\r\n      }\r\n    },\r\n    \"EnableAppServiceAutoscaling\": {" +
                    "\r\n      \"type\": \"bool\",\r\n      \"defaultValue\": false,\r\n      \"metadata\": {\r\n    " +
                    "    \"description\": \"Specifices if auto scaling should be applied to the app serv" +
                    "ice plan.\"\r\n      }\r\n    },\r\n    \"AppServiceSslCertificateName\": {\r\n      \"type\"" +
                    ": \"string\",\r\n      \"metadata\": {\r\n        \"description\": \"The name of the SSL ce" +
                    "rtificate bound to the app service to be used by custom hostnames.\"\r\n      }\r\n  " +
                    "  },\r\n    \"KeyVaultTenantId\": {\r\n      \"type\": \"string\",\r\n      \"metadata\": {\r\n " +
                    "       \"description\": \"The Azure AD Tenant Id associated with the Key Vault.\"\r\n " +
                    "     }\r\n    },\r\n    \"KeyVaultAccessPolicies\": {\r\n      \"type\": \"object\",\r\n      " +
                    "\"defaultValue\": { \"list\": [] },\r\n      \"metadata\": {\r\n        \"description\": \"Th" +
                    "e access policies to be applied to the Key Vault. Defaults to no access policies" +
                    ".\"\r\n      }\r\n    },\r\n    \"DeploymentLocation\": {\r\n      \"type\": \"string\",\r\n     " +
                    " \"defaultValue\": \"[resourceGroup().location]\",\r\n      \"metadata\": {\r\n        \"de" +
                    "scription\": \"The Azure Location (Region) that the resources should be deployed i" +
                    "nto.\"\r\n      }\r\n    },\r\n    \"CertKeyVaultRG\": {\r\n      \"type\": \"string\",\r\n      " +
                    "\"metadata\": {\r\n        \"description\": \"Existing Key Vault resource Id with an ac" +
                    "cess policy to allow Microsoft.Web RP to read Key Vault secrets (Checkout README" +
                    ".md for more information)\"\r\n      }\r\n    },\r\n    \"CertKeyVaultName\": {\r\n      \"t" +
                    "ype\": \"string\"\r\n    }\r\n  },\r\n  \"variables\": {\r\n    \"resourceTags\": {\r\n      \"Env" +
                    "ironment\": \"[toUpper(parameters(\'Environment\'))]\",\r\n      \"Application\": \"");
            
            #line 122 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(application));
            
            #line default
            #line hidden
            this.Write("\",\r\n      \"Owner\": \"");
            
            #line 123 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(owner));
            
            #line default
            #line hidden
            this.Write("\"\r\n    },\r\n    \"teamName\": \"");
            
            #line 125 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(teamName));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"appName\": \"");
            
            #line 126 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(appName));
            
            #line default
            #line hidden
            this.Write("\",\r\n    \"deploymentLocation\": \"[resourceGroup().location]\",\r\n    \"multiRegion\": \"" +
                    "");
            
            #line 128 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(multiRegion));
            
            #line default
            #line hidden
            this.Write(@""",
    ""environment"": ""[toLower(parameters('Environment'))]"",
    ""azureKeyValueTenantId"": ""[parameters('KeyVaultTenantId')]"",
    ""keyVaultAccessPolicies"": ""[parameters('KeyVaultAccessPolicies')]"",
    ""appServicePlanName"": ""[concat(variables('teamName'), '-', variables('environment'), variables('multiRegion'), '-serviceplan')]"",
    ""appServicePlanResourceId"": ""[resourceId('Microsoft.Web/serverFarms/', variables('appServicePlanName'))]"",
    ""appServicePlanSku"": ""[parameters('AppServicePlanSku')]"",
    ""appServicePlanTier"": ""[parameters('AppServicePlanTier')]"",
    ""appServicePlanInstanceCount"": ""[parameters('AppServicePlanInstanceCount')]"",
    ""appServicePlanAutoScaleSettingsName"": ""[concat(variables('appServicePlanName'), '-autoscalesettings')]"",
    ""certKeyVaultId"": ""[resourceId(parameters('CertKeyVaultRG'), 'Microsoft.KeyVault/vaults', parameters('CertKeyVaultName'))]"",
    ""appServicePlanAutoScaleEmailNotificationContacts"": ");
            
            #line 139 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(appServicePlanAutoScaleEmailNotificationContacts));
            
            #line default
            #line hidden
            this.Write(@",
    ""enableAppServiceAutoscaling"": ""[parameters('EnableAppServiceAutoscaling')]"",
    ""appServiceSslCertificateName"": ""[parameters('AppServiceSslCertificateName')]""
  },
  ""resources"": [
    {
      ""type"": ""Microsoft.Web/serverfarms"",
      ""apiVersion"": ""2019-08-01"",
      ""name"": ""[variables('appServicePlanName')]"",
      ""location"": ""[resourceGroup().location]"",
      ""tags"": ""[variables('resourceTags')]"",
      ""kind"": """);
            
            #line 150 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kind));
            
            #line default
            #line hidden
            this.Write("\",\r\n      \"properties\": {\r\n        ");
            
            #line 152 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"
 if (islinux) {
            
            #line default
            #line hidden
            this.Write("            \"reserved\": true,\r\n        ");
            
            #line 154 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"
}
            
            #line default
            #line hidden
            this.Write(@"        ""name"": ""[variables('appServicePlanName')]""
      },
      ""sku"": {
        ""name"": ""[variables('appServicePlanSku')]"",
        ""tier"": ""[variables('appServicePlanTier')]"",
        ""capacity"": ""[variables('appServicePlanInstanceCount')]""
      }
    },
    ");
            
            #line 163 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"
 if (hasCustomCertificate) {
            
            #line default
            #line hidden
            this.Write(@"    {
      ""type"": ""Microsoft.Web/certificates"",
      ""apiVersion"": ""2016-03-01"",
      ""name"": ""[variables('appServiceSslCertificateName')]"",
      ""location"": ""[resourceGroup().location]"",
      ""dependsOn"": [
        ""[concat('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]""
      ],
      ""properties"": {
        ""keyVaultId"": ""[variables('certKeyVaultId')]"",
        ""keyVaultSecretName"": ""[variables('appServiceSslCertificateName')]"",
        ""serverFarmId"": ""[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]""
      }
    },
    ");
            
            #line 178 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"
}
            
            #line default
            #line hidden
            this.Write("    {\r\n      \"name\": \"[variables(\'appServicePlanAutoScaleSettingsName\')]\",\r\n     " +
                    " \"type\": \"microsoft.insights/autoscalesettings\",\r\n      \"dependsOn\": [\r\n        " +
                    "\"[concat(\'Microsoft.Web/serverfarms/\', variables(\'appServicePlanName\'))]\"\r\n     " +
                    " ],\r\n      \"apiVersion\": \"2015-04-01\",\r\n      \"location\": \"[resourceGroup().loca" +
                    "tion]\",\r\n      \"tags\": \"[variables(\'resourceTags\')]\",\r\n      \"properties\": {\r\n  " +
                    "      \"enabled\": \"[variables(\'enableAppServiceAutoscaling\')]\",\r\n        \"targetR" +
                    "esourceUri\": \"[variables(\'appServicePlanResourceId\')]\",\r\n        \"profiles\": [\r\n" +
                    "          {\r\n            \"name\": \"DefaultAutoscaleProfile\",\r\n            \"capaci" +
                    "ty\": {\r\n              \"minimum\": \"1\",\r\n              \"maximum\": \"10\",\r\n         " +
                    "     \"default\": \"1\"\r\n            },\r\n            \"rules\": [\r\n              {\r\n  " +
                    "              \"metricTrigger\": {\r\n                  \"metricName\": \"CpuPercentage" +
                    "\",\r\n                  \"metricNamespace\": \"\",\r\n                  \"metricResourceU" +
                    "ri\": \"[variables(\'appServicePlanResourceId\')]\",\r\n                  \"operator\": \"" +
                    "GreaterThan\",\r\n                  \"statistic\": \"Average\",\r\n                  \"thr" +
                    "eshold\": 65,\r\n                  \"timeAggregation\": \"Average\",\r\n                 " +
                    " \"timeGrain\": \"PT1M\",\r\n                  \"timeWindow\": \"PT5M\"\r\n                }" +
                    ",\r\n                \"scaleAction\": {\r\n                  \"direction\": \"Increase\",\r" +
                    "\n                  \"type\": \"ChangeCount\",\r\n                  \"value\": \"1\",\r\n    " +
                    "              \"cooldown\": \"PT5M\"\r\n                }\r\n              },\r\n         " +
                    "     {\r\n                \"metricTrigger\": {\r\n                  \"metricName\": \"Cpu" +
                    "Percentage\",\r\n                  \"metricNamespace\": \"\",\r\n                  \"metri" +
                    "cResourceUri\": \"[variables(\'appServicePlanResourceId\')]\",\r\n                  \"op" +
                    "erator\": \"LessThan\",\r\n                  \"statistic\": \"Average\",\r\n               " +
                    "   \"threshold\": 45,\r\n                  \"timeAggregation\": \"Average\",\r\n          " +
                    "        \"timeGrain\": \"PT1M\",\r\n                  \"timeWindow\": \"PT5M\"\r\n          " +
                    "      },\r\n                \"scaleAction\": {\r\n                  \"direction\": \"Decr" +
                    "ease\",\r\n                  \"type\": \"ChangeCount\",\r\n                  \"value\": \"1\"" +
                    ",\r\n                  \"cooldown\": \"PT5M\"\r\n                }\r\n              }\r\n   " +
                    "         ]\r\n          }\r\n        ],\r\n        \"notifications\": [\r\n          {\r\n  " +
                    "          \"operation\": \"Scale\",\r\n            \"email\": {\r\n              \"sendToSu" +
                    "bscriptionAdministrator\": true,\r\n              \"sendToSubscriptionCoAdministrato" +
                    "rs\": false,\r\n              \"customEmails\": \"[variables(\'appServicePlanAutoScaleE" +
                    "mailNotificationContacts\')]\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n  " +
                    "  }\r\n  ],\r\n  \"outputs\": {\r\n    \"appserviceplans\": {\r\n      \"type\": \"string\",\r\n  " +
                    "    \"value\": \"[variables(\'appServicePlanName\')]\"\r\n    },\r\n    \"appserviceplansid" +
                    "\": {\r\n      \"type\": \"string\",\r\n      \"value\": \"[resourceId(\'Microsoft.Web/server" +
                    "farms\', variables(\'appServicePlanName\'))]\"\r\n    }\r\n  }\r\n}\r\n");
            
            #line 265 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"

// END TEMPLATE CODE

SaveOutputToSubFolder(codeGenPath, $"{data.Id}\\{data.TeamName.ToLower()}-{data.Name.ToLower()}-infra\\ArmTemplate", "azuredeploy.servicePlan.json");    

            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 272 "C:\research\azure-deploy\CodeTemplates\ServicePlan.tt"

private void SaveOutputToSubFolder(string rootTemplatePath, string folderName, string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(rootTemplatePath.Replace('\\', Path.DirectorySeparatorChar));
  string newDirectoryName = Path.Combine(templateDirectory,folderName.Replace('\\', Path.DirectorySeparatorChar));
  if(!Directory.Exists(newDirectoryName))
  {  
	Directory.CreateDirectory(newDirectoryName);
  }
  string outputFilePath = Path.Combine(newDirectoryName, outputFileName.Replace('\\', Path.DirectorySeparatorChar));
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}

private readonly string deployment;
private readonly string rootTemplatePath;
public ServicePlan(string deployment, string rootTemplatePath) {
    this.deployment = deployment;
    this.rootTemplatePath = rootTemplatePath;
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ServicePlanBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
